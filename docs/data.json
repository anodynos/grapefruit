{
    "project": {
        "name": "GrapeFruit Game Engine",
        "description": "A fun and easy WebGL-enabled JavaScript Game Engine",
        "version": "v0.1.0",
        "url": "https://github.com/englercj/grapefruit",
        "logo": "https://en.gravatar.com/userimage/49218683/8654d0c767f327312ebb1ace7f5a8d8d.png"
    },
    "files": {
        "src\\audio\\AudioManager.js": {
            "name": "src\\audio\\AudioManager.js",
            "modules": {},
            "classes": {
                "AudioManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\audio\\AudioPlayer.js": {
            "name": "src\\audio\\AudioPlayer.js",
            "modules": {},
            "classes": {
                "AudoPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\camera\\Camera.js": {
            "name": "src\\camera\\Camera.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\BaseTexture.js": {
            "name": "src\\display\\BaseTexture.js",
            "modules": {},
            "classes": {
                "BaseTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Container.js": {
            "name": "src\\display\\Container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Graphics.js": {
            "name": "src\\display\\Graphics.js",
            "modules": {},
            "classes": {
                "Graphics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\RenderTexture.js": {
            "name": "src\\display\\RenderTexture.js",
            "modules": {},
            "classes": {
                "RenderTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Sprite.js": {
            "name": "src\\display\\Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Texture.js": {
            "name": "src\\display\\Texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\TilingSprite.js": {
            "name": "src\\display\\TilingSprite.js",
            "modules": {},
            "classes": {
                "TilingSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\Game.js": {
            "name": "src\\game\\Game.js",
            "modules": {},
            "classes": {
                "Game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\State.js": {
            "name": "src\\game\\State.js",
            "modules": {},
            "classes": {
                "State": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\StateManager.js": {
            "name": "src\\game\\StateManager.js",
            "modules": {},
            "classes": {
                "StateManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\World.js": {
            "name": "src\\game\\World.js",
            "modules": {},
            "classes": {
                "World": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Circle.js": {
            "name": "src\\geom\\Circle.js",
            "modules": {},
            "classes": {
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Ellipse.js": {
            "name": "src\\geom\\Ellipse.js",
            "modules": {},
            "classes": {
                "Ellipse": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Polygon.js": {
            "name": "src\\geom\\Polygon.js",
            "modules": {},
            "classes": {
                "Polygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\geom\\Rectangle.js": {
            "name": "src\\geom\\Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\GuiItem.js": {
            "name": "src\\gui\\GuiItem.js",
            "modules": {},
            "classes": {
                "GuiItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\gamepad\\GamepadButtons.js": {
            "name": "src\\input\\gamepad\\GamepadButtons.js",
            "modules": {},
            "classes": {
                "GamepadButtons": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\gamepad\\GamepadSticks.js": {
            "name": "src\\input\\gamepad\\GamepadSticks.js",
            "modules": {},
            "classes": {
                "GamepadSticks": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\pointer\\Pointer.js": {
            "name": "src\\input\\pointer\\Pointer.js",
            "modules": {},
            "classes": {
                "Pointer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Gamepad.js": {
            "name": "src\\input\\Gamepad.js",
            "modules": {},
            "classes": {
                "Gamepad": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Input.js": {
            "name": "src\\input\\Input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\InputManager.js": {
            "name": "src\\input\\InputManager.js",
            "modules": {},
            "classes": {
                "InputManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Keyboard.js": {
            "name": "src\\input\\Keyboard.js",
            "modules": {},
            "classes": {
                "Keyboard": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Pointers.js": {
            "name": "src\\input\\Pointers.js",
            "modules": {},
            "classes": {
                "Pointers": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\Loader.js": {
            "name": "src\\loader\\Loader.js",
            "modules": {},
            "classes": {
                "Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\math\\QuadTree.js": {
            "name": "src\\math\\QuadTree.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\math\\Vector.js": {
            "name": "src\\math\\Vector.js",
            "modules": {},
            "classes": {
                "Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\math\\math.js": {
            "name": "src\\math\\math.js",
            "modules": {},
            "classes": {
                "math": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\particles\\ParticleEmitter.js": {
            "name": "src\\particles\\ParticleEmitter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\physics\\Physics.js": {
            "name": "src\\physics\\Physics.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\text\\BitmapText.js": {
            "name": "src\\text\\BitmapText.js",
            "modules": {},
            "classes": {
                "BitmapText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\text\\Text.js": {
            "name": "src\\text\\Text.js",
            "modules": {},
            "classes": {
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\ObjectGroup.js": {
            "name": "src\\tilemap\\ObjectGroup.js",
            "modules": {},
            "classes": {
                "ObjectGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tile.js": {
            "name": "src\\tilemap\\Tile.js",
            "modules": {},
            "classes": {
                "Tile": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tilelayer.js": {
            "name": "src\\tilemap\\Tilelayer.js",
            "modules": {},
            "classes": {
                "Tilelayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tilemap.js": {
            "name": "src\\tilemap\\Tilemap.js",
            "modules": {},
            "classes": {
                "Tilemap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\tilemap\\Tileset.js": {
            "name": "src\\tilemap\\Tileset.js",
            "modules": {},
            "classes": {
                "Tileset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Cache.js": {
            "name": "src\\utils\\Cache.js",
            "modules": {},
            "classes": {
                "Cache": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Clock.js": {
            "name": "src\\utils\\Clock.js",
            "modules": {},
            "classes": {
                "Clock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\EventEmitter.js": {
            "name": "src\\utils\\EventEmitter.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\ObjectFactory.js": {
            "name": "src\\utils\\ObjectFactory.js",
            "modules": {},
            "classes": {
                "ObjectFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\ObjectPool.js": {
            "name": "src\\utils\\ObjectPool.js",
            "modules": {},
            "classes": {
                "ObjectPool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\SpritePool.js": {
            "name": "src\\utils\\SpritePool.js",
            "modules": {},
            "classes": {
                "SpritePool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\inherit.js": {
            "name": "src\\utils\\inherit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\support.js": {
            "name": "src\\utils\\support.js",
            "modules": {},
            "classes": {
                "support": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\utils.js": {
            "name": "src\\utils\\utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core.js": {
            "name": "src\\core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\plugin.js": {
            "name": "src\\plugin.js",
            "modules": {},
            "classes": {
                "plugin": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AudioManager": {
            "name": "AudioManager",
            "shortname": "AudioManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\audio\\AudioManager.js",
            "line": 9,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio\nThe GF Audio API was based on [Howler.js](https://github.com/goldfire/howler.js)",
            "extends": "Object",
            "is_constructor": 1
        },
        "AudoPlayer": {
            "name": "AudoPlayer",
            "shortname": "AudoPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\audio\\AudioPlayer.js",
            "line": 7,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio\nThe GF Audio API was based on [Howler.js](https://github.com/goldfire/howler.js)",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "manager",
                    "description": "AudioManager instance for this audio player",
                    "type": "AudioManager"
                },
                {
                    "name": "audio",
                    "description": "The preloaded audio file object",
                    "type": "ArrayBuffer|Audio",
                    "props": [
                        {
                            "name": "data",
                            "description": "The actual audio data",
                            "type": "ArrayBuffer|Audio"
                        },
                        {
                            "name": "webAudio",
                            "description": "Whether the file is using webAudio or not",
                            "type": "Boolean"
                        },
                        {
                            "name": "decoded",
                            "description": "Whether the data has been decoded yet or not",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "settings",
                    "description": "All the settings for this player instance",
                    "type": "Object"
                }
            ]
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\camera\\Camera.js",
            "line": 10,
            "description": "A basic Camera object that provides some effects. It also will contain the HUD and GUI\nto ensure they are using \"screen-coords\".",
            "extends": "Container",
            "is_constructor": 1
        },
        "BaseTexture": {
            "name": "BaseTexture",
            "shortname": "BaseTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\BaseTexture.js",
            "line": 1,
            "description": "A texture stores the information that represents an image. All textures have a base texture\nsee [PIXI.BaseTexture](http://www.goodboydigital.com/pixijs/docs/classes/BaseTexture.html)\nfor more information.",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "source",
                    "description": "the source object (image or canvas)",
                    "type": "Image|Canvas"
                }
            ]
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Container.js",
            "line": 6,
            "description": "The base display object, that anything being put on the screen inherits from",
            "extends": "[PIXI.DisplayObjectContainer](http://www.goodboydigital.com/pixijs/docs/classes/DisplayObjectContainer.html)",
            "uses": [
                "EventEmitter",
                "PhysicsTarget"
            ],
            "is_constructor": 1
        },
        "Graphics": {
            "name": "Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Graphics.js",
            "line": 1,
            "description": "The Graphics class contains a set of methods that you can use to create primitive shapes and lines. \nIt is important to know that with the webGL renderer only simple polys can be filled at this stage\nComplex polys will not be filled. Heres an example of a\n[complex polygon](http://www.goodboydigital.com/wp-content/uploads/2013/06/complexPolygon.png).\nsee [PIXI.Graphics](http://www.goodboydigital.com/pixijs/docs/classes/Graphics.html)\nfor more information.",
            "extends": "[PIXI.DisplayObjectContainer](http://www.goodboydigital.com/pixijs/docs/classes/DisplayObjectContainer.html)",
            "is_constructor": 1
        },
        "RenderTexture": {
            "name": "RenderTexture",
            "shortname": "RenderTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\RenderTexture.js",
            "line": 1,
            "description": "A RenderTexture is a special texture that allows any pixi displayObject to be rendered to it.\n\n__Hint__: All DisplayObjects (exmpl. Sprites) that renders on RenderTexture should be preloaded. \nOtherwise black rectangles will be drawn instead.\n\nRenderTexture takes snapshot of DisplayObject passed to render method. If DisplayObject is passed to render method, position and rotation of it will be ignored. For example:\n\n```\nvar renderTexture = new gf.RenderTexture(800, 600);\nvar sprite = gf.Sprite(texture);\nsprite.position.x = 800/2;\nsprite.position.y = 600/2;\nsprite.anchor.x = 0.5;\nsprite.anchor.y = 0.5;\nrenderTexture.render(sprite);\n```\n\nSprite in this case will be rendered to 0,0 position. To render this sprite at center Container should be used:\n\n```\nvar doc = new gf.Container();\ndoc.addChild(sprite);\nrenderTexture.render(doc);  // Renders to center of renderTexture\n```",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The width of the render texture",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the render texture",
                    "type": "Number"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Sprite.js",
            "line": 10,
            "description": "The base Sprite class. This class is the base for all images on the screen",
            "extends": "[PIXI.Sprite](http://www.goodboydigital.com/pixijs/docs/classes/Sprite.html)",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "textures",
                    "description": "The texture for the sprite to display, an array of texture to animation through, or an animation object.\n     The later looks like: `{ animationName: { frames: [frame1, frame2], rate: 2 } }` where each frame is a Texture object",
                    "type": "Texture|Array<Texture>|Object"
                },
                {
                    "name": "speed",
                    "description": "The speed of the animations (can be overriden on a specific animations)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "start",
                    "description": "The animation to start with, defaults to the first found key otherwise",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n     var spr = new gf.Sprite(texture);"
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Texture.js",
            "line": 1,
            "description": "A texture stores the information that represents an image or part of an image. It cannot be added\nto the display list directly. It is used to desribe how a Sprite looks. If no frame is provided\nthen the whole image is used.\nSee [PIXI.Texture](http://www.goodboydigital.com/pixijs/docs/classes/Texture.html)\nfor more information.",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "baseTexture",
                    "description": "The base texture source to create the texture from",
                    "type": "BaseTexture"
                },
                {
                    "name": "frame",
                    "description": "The rectangle frame of the texture to show",
                    "type": "Rectangle"
                }
            ]
        },
        "TilingSprite": {
            "name": "TilingSprite",
            "shortname": "TilingSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\TilingSprite.js",
            "line": 1,
            "description": "A tiling sprite is a fast way of rendering a tiling image\nsee [PIXI.TilingSprite](http://www.goodboydigital.com/pixijs/docs/classes/TilingSprite.html)\nfor more information.",
            "extends": "[PIXI.DisplayObjectContainer](http://www.goodboydigital.com/pixijs/docs/classes/DisplayObjectContainer.html)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "the texture of the tiling sprite",
                    "type": "Texture"
                },
                {
                    "name": "width",
                    "description": "the width of the tiling sprite",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height of the tiling sprite",
                    "type": "Number"
                }
            ]
        },
        "Game": {
            "name": "Game",
            "shortname": "Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\Game.js",
            "line": 16,
            "description": "Main game object, controls the entire instance of the game",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "contId",
                    "description": "The container for the new canvas we will create for the game",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the game instance",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "The width of the viewport",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "The height of the viewport",
                            "type": "Number"
                        },
                        {
                            "name": "renderer",
                            "description": "The renderer to use either RENDERER.AUTO, RENDERER.CANVAS, or RENDERER.WEBGL",
                            "type": "String",
                            "optional": true,
                            "optdefault": "RENDERER.AUTO"
                        },
                        {
                            "name": "transparent",
                            "description": "Should the render element have a transparent background",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "background",
                            "description": "The background color of the stage",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "'#FFF'"
                        },
                        {
                            "name": "antialias",
                            "description": "Anti-alias graphics (in WebGL this helps with edges, in Canvas2D it retains pixel-art quality)",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "canvas",
                            "description": "The canvas to render into, if not specified one is created",
                            "type": "DOMElement",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "State": {
            "name": "State",
            "shortname": "State",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\State.js",
            "line": 9,
            "description": "States are containers that represent different states of a game",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of this state",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "settings",
                    "description": "All the settings for this game state",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "gravity",
                            "description": "The gravity constant for the physics system (default is 9.87, which is normal Earth gravity)",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "example": [
                "\n     var state = new GameState(game, 'battle');\n     state.addChild(battlePlayer);\n     state.addChild(enemy);\n\n     game.enableState(state); //or you can use the name from the ctor 'battle'"
            ]
        },
        "StateManager": {
            "name": "StateManager",
            "shortname": "StateManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\StateManager.js",
            "line": 4,
            "description": "A state manager is a container for all the states in a game.",
            "extends": "Object",
            "is_constructor": 1
        },
        "World": {
            "name": "World",
            "shortname": "World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\World.js",
            "line": 7,
            "description": "The world is the container for all game objects in a game state.",
            "extends": "Container",
            "is_constructor": 1
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Circle.js",
            "line": 5,
            "description": "The Circle object is an area defined by its position, as indicated by its\ncenter point (x, y) and by its radius.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "center",
                    "description": "The point of the center of the circle",
                    "type": "Vector"
                },
                {
                    "name": "radius",
                    "description": "The radius of the circle",
                    "type": "Number"
                }
            ]
        },
        "Ellipse": {
            "name": "Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Ellipse.js",
            "line": 1,
            "description": "The Ellipse object can be used to specify a hit area for displayobjects\nsee [PIXI.Ellipse](http://www.goodboydigital.com/pixijs/docs/classes/Ellipse.html)\nfor more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the framing rectangle of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall height of this ellipse",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall width of this ellipse",
                    "type": "Number"
                }
            ]
        },
        "Polygon": {
            "name": "Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Polygon.js",
            "line": 5,
            "description": "A *convex* clockwise Polygon.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X origin of the polygon, all X coords for all points are relative to this",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y origin of the polygon, all Y coords for all points are relative to this",
                    "type": "Number"
                },
                {
                    "name": "points",
                    "description": "This can be an array of Vectors that form the polygon,\n     a flat array of numbers that will be interpreted as [x,y, x,y, ...], or the arugments passed can be\n     all the points of the polygon e.g. `new Polygon(X, Y, new Vector(), new Vector(), ...)`, or the\n     arguments passed can be flat x,y values e.g. `new Polygon(X, Y, x,y, x,y, x,y, ...)` where `x` and `y` are\n     Numbers.",
                    "type": "Array<Vector>|Array<Number>|Point...|Number...",
                    "multiple": true
                }
            ]
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\geom\\Rectangle.js",
            "line": 8,
            "description": "The Rectangle object is an area defined by its position, as indicated by its\ntop-left corner point (x, y) and by its width and its height.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the upper-left corner of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the upper-left corner of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The overall wisth of this rectangle",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The overall height of this rectangle",
                    "type": "Number"
                }
            ]
        },
        "GuiItem": {
            "name": "GuiItem",
            "shortname": "GuiItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\GuiItem.js",
            "line": 4,
            "description": "The base GuiItem that represents an element of a gui on the screen.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to set the sprite to",
                    "type": "Texture"
                },
                {
                    "name": "interactive",
                    "description": "Whether this item should repsond to mouse events",
                    "type": "Boolean"
                }
            ]
        },
        "GamepadButtons": {
            "name": "GamepadButtons",
            "shortname": "GamepadButtons",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 4,
            "description": "Controls gamepad button input",
            "extends": "Input",
            "is_constructor": 1
        },
        "GamepadSticks": {
            "name": "GamepadSticks",
            "shortname": "GamepadSticks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 4,
            "description": "Controls gamepad stick input",
            "extends": "Input",
            "is_constructor": 1
        },
        "Pointer": {
            "name": "Pointer",
            "shortname": "Pointer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\pointer\\Pointer.js",
            "line": 6,
            "description": "Represents a single pointer input method",
            "extends": "Input",
            "is_constructor": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The identifier for this pointer",
                    "type": "String|Number"
                },
                {
                    "name": "manager",
                    "description": "The pointer manager for this pointer instance",
                    "type": "Pointers"
                }
            ]
        },
        "Gamepad": {
            "name": "Gamepad",
            "shortname": "Gamepad",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Gamepad.js",
            "line": 6,
            "description": "Controls input from gamepads",
            "extends": "Input",
            "is_constructor": 1
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Input.js",
            "line": 4,
            "description": "The base Input object, holds common functions and properties between input types",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "InputManager": {
            "name": "InputManager",
            "shortname": "InputManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\InputManager.js",
            "line": 6,
            "description": "Manages all input handlers in a unified way",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "Keyboard": {
            "name": "Keyboard",
            "shortname": "Keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Keyboard.js",
            "line": 4,
            "description": "Controls keyboard input",
            "extends": "Input",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "Pointers": {
            "name": "Pointers",
            "shortname": "Pointers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Pointers.js",
            "line": 5,
            "description": "Controls pointer input (mouse, touch, pen, etc) or all pointers tracked by the game",
            "extends": "Input",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this input belongs to",
                    "type": "Game"
                }
            ]
        },
        "Loader": {
            "name": "Loader",
            "shortname": "Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\loader\\Loader.js",
            "line": 10,
            "description": "The Loader loads and parses different game assets, such as sounds, textures,\nTMX World files (exported from the [Tiled Editor](http://mapeditor.org)),\nand Spritesheet files (published from [Texture Packer](http://www.codeandweb.com/texturepacker)).",
            "extends": "Object",
            "uses": [
                "EventEmitter"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Game instance this belongs to",
                    "type": "Game"
                }
            ]
        },
        "Vector": {
            "name": "Vector",
            "shortname": "Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\math\\Vector.js",
            "line": 3,
            "description": "A 2d Vector implementation stolen directly from mrdoob's THREE.js\n[Vector2d](https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js)",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ]
        },
        "math": {
            "name": "math",
            "shortname": "math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\math\\math.js",
            "line": 4,
            "description": "The grapefruit math library, used to abstract commonly used math operations",
            "extends": "Object"
        },
        "BitmapText": {
            "name": "BitmapText",
            "shortname": "BitmapText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\text\\BitmapText.js",
            "line": 11,
            "description": "A Text Object will create (a) line(s) of text using bitmap font. To split a line you can use \"\\n\", \"\\r\" or \"\\r\\n\"\nYou can generate the fnt files using [bmfont](http://www.angelcode.com/products/bmfont/) for windows or\n[bmglyph](http://www.bmglyph.com/) for mac.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "The font data object (this is generally grabbed from `game.cache.getBitmapFont('mykey')`);",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "The name of the font",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The base size of the font",
                            "type": "Number"
                        },
                        {
                            "name": "lineHeight",
                            "description": "The line height of the font",
                            "type": "Number"
                        },
                        {
                            "name": "chars",
                            "description": "The characters in the font, each should have a texture and kerning info",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "size",
                            "description": "The font size of the text, overrides the font's size",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        }
                    ]
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\text\\Text.js",
            "line": 1,
            "description": "A Text Object will create a line(s) of text to split a line you can use \"\\n\"\nsee <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Text.html\">PIXI.Text</a>\nfor more information.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The copy that you would like the text to display",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "The style parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "font",
                            "description": "default \"bold 20pt Arial\" The style and size of the font",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "fill",
                            "description": "A canvas fillstyle that will be used on the text eg \"red\", \"#00FF00\"",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "\"black\""
                        },
                        {
                            "name": "align",
                            "description": "An alignment of the multiline text (\"left\", \"center\" or \"right\")",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"left\""
                        },
                        {
                            "name": "stroke",
                            "description": "A canvas fillstyle that will be used on the text stroke eg \"blue\", \"#FCFF00\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "strokeThickness",
                            "description": "A number that represents the thickness of the stroke. Default is 0 (no stroke)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "wordWrap",
                            "description": "Indicates if word wrap should be used",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "wordWrapWidth",
                            "description": "The width at which text will wrap",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        }
                    ]
                }
            ]
        },
        "ObjectGroup": {
            "name": "ObjectGroup",
            "shortname": "ObjectGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 10,
            "description": "Tiled object group is a special layer that contains entities\nTODO: This is all trash",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "The tilemap instance that this belongs to",
                    "type": "Tilemap"
                },
                {
                    "name": "group",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "Tile": {
            "name": "Tile",
            "shortname": "Tile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tile.js",
            "line": 4,
            "description": "Base Tile implementation, a tile is a single tile in a tilemap layer",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture of the tile",
                    "type": "Texture"
                }
            ]
        },
        "Tilelayer": {
            "name": "Tilelayer",
            "shortname": "Tilelayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 12,
            "description": "The Tilelayer is the visual tiled layer that actually displays on the screen\n\nThis class will be created by the Tilemap, there shouldn't be a reason to\ncreate an instance on your own.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "The tilemap instance that this belongs to",
                    "type": "Tilemap"
                },
                {
                    "name": "layer",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "Tilemap": {
            "name": "Tilemap",
            "shortname": "Tilemap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tilemap.js",
            "line": 10,
            "description": "Tiled map that represents an entire tile map with multiple layers or object groups.\nOften it is easier to create a tilemap using the object factor on a world, rather\nthan doing it manually yourself.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The game state the map belongs to",
                    "type": "State"
                },
                {
                    "name": "map",
                    "description": "All the settings for the map",
                    "type": "Object"
                },
                {
                    "name": "tilesetTextures",
                    "description": "An object whose keys are the tileset name,\n     and whose values are the textures for the tileset. For example:\n     `{ tileset1: new Texture(), ... }`",
                    "type": "Object"
                }
            ]
        },
        "Tileset": {
            "name": "Tileset",
            "shortname": "Tileset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\tilemap\\Tileset.js",
            "line": 8,
            "description": "This object represents a tileset used by a Tilemap.\nThere can be multiple Tilesets in a map",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to use for the tileset",
                    "type": "Texture"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the tileset",
                    "type": "Object",
                    "props": [
                        {
                            "name": "tilewidth",
                            "description": "The width of a single tile in the set",
                            "type": "Number"
                        },
                        {
                            "name": "tileheight",
                            "description": "The height of a single tile in the set",
                            "type": "Number"
                        },
                        {
                            "name": "firstgid",
                            "description": "The id of the first tile in the set, defaults to 1",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "spacing",
                            "description": "The spacing around tiles in the tileset (in pixels)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "margin",
                            "description": "The margin around a tile in the tileset (in pixels)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "tileoffset",
                            "description": "The offset to apply to a tile rendered from this tileset",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The X offset to apply to the tile",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "y",
                                    "description": "The Y offset to apply to the tile",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                }
                            ]
                        },
                        {
                            "name": "properties",
                            "description": "User-defined, custom properties that apply to the tileset",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "tileproperties",
                            "description": "User-defined, custom properties that apply to tiles in the tileset\n The keys of this object should the tile id to apply to",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "imagewidth",
                            "description": "An override for the image width",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "imageheight",
                            "description": "An override for the image height",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Cache": {
            "name": "Cache",
            "shortname": "Cache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Cache.js",
            "line": 11,
            "description": "A game only has one instance of a Cache and it is used to store all externally loaded assets such\nas images, sounds and data files as a result of Loader calls. Cache items use string based keys for look-up.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this cache belongs to",
                    "type": "Game"
                }
            ]
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Clock.js",
            "line": 3,
            "description": "High performance clock, based on mrdoob's\n[Three.js clock](https://github.com/mrdoob/three.js/blob/master/src/core/Clock.js),\nbut with tweaks.",
            "extends": "Object",
            "is_constructor": 1
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "AudoPlayer",
                "BaseTexture",
                "Container",
                "Sprite",
                "Texture",
                "Game",
                "Input",
                "Loader"
            ],
            "file": "src\\utils\\EventEmitter.js",
            "line": 1,
            "description": "Event emitter mixin. This will add emitter properties to an object so that\nit can emit events, and have others listen for them. Based on\n[node.js event emitter](https://github.com/joyent/node/blob/master/lib/events.js)",
            "is_constructor": 1
        },
        "ObjectFactory": {
            "name": "ObjectFactory",
            "shortname": "ObjectFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\ObjectFactory.js",
            "line": 9,
            "description": "The object factory makes it simple to create and add objects to a parent. One is added\nto a State's world and camera by default, but they can be used for any parent but they\ncan only belong to a single state.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The game state this factory belongs to",
                    "type": "State"
                },
                {
                    "name": "parent",
                    "description": "The container to act as the parent for created objects",
                    "type": "Container"
                }
            ]
        },
        "ObjectPool": {
            "name": "ObjectPool",
            "shortname": "ObjectPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\ObjectPool.js",
            "line": 3,
            "description": "Holds a pool of different Objects to help reduce the number times\nan object is created and destroyed.",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The object type that this pool will hold (like Sprite, or Tile)",
                    "type": "Mixed"
                },
                {
                    "name": "parent",
                    "description": "The parent that the objects will be added to. Passing this in will\n     make the pool add any newly created objects as children to this object.",
                    "type": "Mixed"
                }
            ]
        },
        "SpritePool": {
            "name": "SpritePool",
            "shortname": "SpritePool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\SpritePool.js",
            "line": 4,
            "description": "Holds a pool of different Sprites that can be created, makes it very\neasy to quickly create different registered entities",
            "extends": "Object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this sprite pool belongs to",
                    "type": "Game"
                }
            ]
        },
        "support": {
            "name": "support",
            "shortname": "support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\support.js",
            "line": 1,
            "description": "Holds the results of the feature detection run on the browser, to make it simple to\nsee which features the library can use.",
            "extends": "Object"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\utils.js",
            "line": 6,
            "description": "The grapefruit utility object, used for misc functions used throughout the code base",
            "extends": "Object"
        },
        "plugin": {
            "name": "plugin",
            "shortname": "plugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\plugin.js",
            "line": 2,
            "description": "Provides methods for patching core functions, and registering plugins.",
            "extends": "Object"
        }
    },
    "classitems": [
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 18,
            "description": "The game instance this manager belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 26,
            "description": "The parent for this audio manager",
            "itemtype": "property",
            "name": "parent",
            "type": "AudioManager",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 34,
            "description": "Whether the player is muted or not",
            "itemtype": "property",
            "name": "muted",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 44,
            "description": "The master volume of the player",
            "itemtype": "property",
            "name": "_volume",
            "type": "Number",
            "default": "1",
            "access": "private",
            "tagname": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 54,
            "description": "The master volume of all the audio playing",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "default": "1",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 66,
            "description": "The Web Audio API context if we are using it",
            "itemtype": "property",
            "name": "ctx",
            "type": "AudioContext",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 75,
            "description": "If we have some way of playing audio",
            "itemtype": "property",
            "name": "canPlay",
            "type": "Boolean",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 96,
            "description": "Returns the current master volume",
            "itemtype": "method",
            "name": "getVolume",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 104,
            "description": "Sets the current master volume",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 131,
            "description": "Mutes all playing audio",
            "itemtype": "method",
            "name": "mute",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 139,
            "description": "Unmutes all playing audio",
            "itemtype": "method",
            "name": "unmute",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 147,
            "description": "Sets whether or not this manager is muted",
            "itemtype": "method",
            "name": "setMuted",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 171,
            "description": "Sets the parent of this audio manager, if using webAudio this\nmeans that we connect to the parent masterGain node and inherit\nanything that happens to it (such as muting).",
            "itemtype": "method",
            "name": "setParent",
            "params": [
                {
                    "name": "parent",
                    "description": "The parent to connect to, or `null` to connect to the global context",
                    "type": "AudioManager"
                }
            ],
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 193,
            "description": "Attaches an AudioPlayer to this manager, if using webAudio this means\nthat the sound will connect to this masterGain node and inherit anything\nthat happens to it (such as muting).",
            "itemtype": "method",
            "name": "attach",
            "params": [
                {
                    "name": "sound",
                    "description": "The player to attach to this manager",
                    "type": "AudioPlayer"
                }
            ],
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 214,
            "description": "Creates a new audio player for a peice of audio",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded audio",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the audio player",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "volume",
                            "description": "The volume of this audio clip",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "autoplay",
                            "description": "Automatically start playing after loaded",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "loop",
                            "description": "Replay the audio when it finishes",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "sprite",
                            "description": "A map of string names -> [start, duration] arrays. You can use it to put multiple sounds in one file",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "pos3d",
                            "description": "3D coords of where the audio should sound as if it came from (only works with WebAudio)",
                            "type": "Array<Number>",
                            "optional": true
                        },
                        {
                            "name": "buffer",
                            "description": "WebAudio will load the entire file before playing, making this true forces HTML5Audio which will buffer and play",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "format",
                            "description": "Force an extension override",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Will return the new audio player, or false if we couldn't determine a compatible url",
                "type": "AudioPlayer"
            },
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 25,
            "description": "The source of the audio, the actual URL to load up",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 33,
            "description": "The game instance this player belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 41,
            "description": "The cache key that uniquely identifies this piece of audio",
            "itemtype": "property",
            "name": "key",
            "type": "String",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 49,
            "description": "Play the audio immediately after loading",
            "itemtype": "property",
            "name": "autoplay",
            "type": "Boolean",
            "default": "false",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 58,
            "description": "Override the format determined from the extension with this extension",
            "itemtype": "property",
            "name": "format",
            "type": "String",
            "default": "null",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 67,
            "description": "Replay the audio immediately after finishing",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "false",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 76,
            "description": "A 3D position where the audio should sound like it is coming from",
            "itemtype": "property",
            "name": "pos3d",
            "type": "Array<Number>",
            "default": "[0, 0, -0.5]",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 85,
            "description": "A sound sprite that maps string keys to [start, duration] arrays. These can\nbe used to put multiple sound bits in one file, and play them separately",
            "itemtype": "property",
            "name": "sprite",
            "type": "Object",
            "default": "{}",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 95,
            "description": "The volume of the audio player",
            "itemtype": "property",
            "name": "volume",
            "type": "Number",
            "default": "1",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 107,
            "description": "The preloaded audio file object",
            "itemtype": "property",
            "name": "_file",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 135,
            "description": "Load the audio file for this player, this is called from the ctor\nthere is no reason to call it manually.",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 194,
            "description": "Play a sound from the current time (0 by default).",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "sprite",
                    "description": "Plays from the specified position in the sound sprite definition.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Returns the unique playback id for this sound instance.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 330,
            "description": "Pause playback and save the current position.",
            "itemtype": "method",
            "name": "pause",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "timerId",
                    "description": "Clear the correct timeout ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 381,
            "description": "Stop playback and reset to start.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "timerId",
                    "description": "Clear the correct timeout ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 427,
            "description": "Mute this sound.",
            "itemtype": "method",
            "name": "mute",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 437,
            "description": "Unmute this sound.",
            "itemtype": "method",
            "name": "unmute",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 447,
            "description": "Set the muted state of this sound.",
            "itemtype": "method",
            "name": "setMuted",
            "params": [
                {
                    "name": "muted",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 478,
            "description": "Set the position of playback.",
            "itemtype": "method",
            "name": "seek",
            "params": [
                {
                    "name": "pos",
                    "description": "The position to move current playback to.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 514,
            "description": "Get the position of playback.",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 544,
            "description": "Fade a currently playing sound between two volumes.",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "from",
                    "description": "The volume to fade from (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "The volume to fade to (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "Time in milliseconds to fade.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Fired when the fade is complete.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 586,
            "description": "Returns the current volume of the player",
            "itemtype": "method",
            "name": "getVolume",
            "return": {
                "description": "The current volume",
                "type": "Number"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 595,
            "description": "Sets the current volume of the player",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "vol",
                    "description": "The current volume",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 634,
            "description": "Set the 3D position of the audio source.\nThe most common usage is to set the 'x' position\nto affect the left/right ear panning. Setting any value higher than\n1.0 will begin to decrease the volume of the sound as it moves further away.\nNOTE: This only works with Web Audio API, HTML5 Audio playback\nwill not be affected.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The x-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The z-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 678,
            "description": "Performs a step in the fade transition",
            "itemtype": "method",
            "name": "_doFadeStep",
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 696,
            "description": "Get an audio node by ID.",
            "itemtype": "method",
            "name": "_nodeById",
            "return": {
                "description": "Audio node.",
                "type": "AudioPlayer"
            },
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 716,
            "description": "Get the first active audio node.",
            "itemtype": "method",
            "name": "_activeNode",
            "return": {
                "description": "Audio node.",
                "type": "AudioPlayer"
            },
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 739,
            "description": "Get the first inactive audio node.\nIf there is none, create a new one and add it to the pool.",
            "itemtype": "method",
            "name": "_inactiveNode",
            "params": [
                {
                    "name": "cb",
                    "description": "callback Function to call when the audio node is ready.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 775,
            "description": "If there are more than 5 inactive audio nodes in the pool, clear out the rest.",
            "itemtype": "method",
            "name": "_drainPool",
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 803,
            "description": "Clear 'onend' timeout before it ends.",
            "itemtype": "method",
            "name": "_clearEndTimer",
            "params": [
                {
                    "name": "timerId",
                    "description": "timerId The ID of the sound to be cancelled.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 821,
            "description": "Setup the gain node and panner for a Web Audio instance.",
            "itemtype": "method",
            "name": "_setupAudioNode",
            "return": {
                "description": "The new audio node.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 847,
            "description": "Finishes loading the Web Audio API sound and fires the loaded event",
            "itemtype": "method",
            "name": "loadSound",
            "params": [
                {
                    "name": "buffer",
                    "description": "The decoded buffer sound source.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 874,
            "description": "Load the sound back into the buffer source.",
            "itemtype": "method",
            "name": "refreshBuffer",
            "params": [
                {
                    "name": "loop",
                    "description": "Loop boolean, pos, and duration.",
                    "type": "Array"
                },
                {
                    "name": "id",
                    "description": "The play instance ID.",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 19,
            "description": "The world instance this camera is tied to",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 27,
            "description": "The game instance this camera belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 35,
            "description": "The game state this camera belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "State",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 43,
            "description": "The bounds of that the camera can move to",
            "itemtype": "property",
            "name": "bounds",
            "type": "Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 53,
            "description": "When following a sprite this is the space within the camera that it can move around\nbefore the camera moves to track it.",
            "itemtype": "property",
            "name": "_deadzone",
            "type": "Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 64,
            "description": "The target that the camera will follow",
            "itemtype": "property",
            "name": "_target",
            "type": "Sprite",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 74,
            "description": "The size of the camera",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 83,
            "description": "Half of the size of the camera",
            "itemtype": "property",
            "name": "hSize",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 92,
            "description": "The container that holds all the GUI items, direct children of Camera are effects",
            "itemtype": "property",
            "name": "gui",
            "type": "Container",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 101,
            "description": "An object factory for creating game objects",
            "itemtype": "property",
            "name": "add",
            "type": "ObjectFactory",
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 116,
            "description": "Follows an sprite with the camera, ensuring they are always center view. You can\npass a follow style to change the area an sprite can move around in before we start\nto move with them.",
            "itemtype": "method",
            "name": "follow",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to follow",
                    "type": "Sprite"
                },
                {
                    "name": "style",
                    "description": "The style of following",
                    "type": "CAMERA_FOLLOW",
                    "optional": true,
                    "optdefault": "CAMERA_FOLLOW.LOCKON"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 172,
            "description": "Stops following any sprites",
            "itemtype": "method",
            "name": "unfollow",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 182,
            "description": "Focuses the camera on a sprite.",
            "itemtype": "method",
            "name": "focusSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to focus on",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 195,
            "description": "Focuses the camera on an x,y position. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "focus",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to focus on, if a Vector is passed the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y coord to focus on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 216,
            "description": "Pans the camera around by the x,y amount. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 266,
            "description": "Resizes the viewing area, this is called internally by your game instance\nwhen you call mygame.resize(). DO NOT CALL THIS DIRECTLY",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "The new width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The new height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 285,
            "description": "Sets the bounds the camera is allowed to go. Usually this is the world's\nsize unless you set it manually.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to constrain the camera into",
                    "type": "Rectangle|Polygon|Circle|Ellipse"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 298,
            "description": "Removes the constraints of the camera, to allow free movement around the world",
            "itemtype": "method",
            "name": "unconstrain",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\camera\\Camera.js",
            "line": 309,
            "description": "Called internally every frame. Updates all effects and the follow",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "dt",
                    "description": "The delta time (in seconds) since the last update",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 26,
            "description": "[read-only] The of children of this object.",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "readonly": "",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 32,
            "description": "The coordinate of the object relative to the local coordinates of the parent.",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 39,
            "description": "The scale factor of the object.",
            "itemtype": "property",
            "name": "scale",
            "type": "Point",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 46,
            "description": "The rotation of the object in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 53,
            "description": "The opacity of the object.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 60,
            "description": "The visibility of the object.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 67,
            "description": "[read-only] The display object that contains this display object.",
            "itemtype": "property",
            "name": "parent",
            "type": "DisplayObject",
            "readonly": "",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 75,
            "description": "[read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.",
            "itemtype": "property",
            "name": "stage",
            "type": "Stage",
            "readonly": "",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 83,
            "description": "This is the defined area that will pick up mouse / touch events. It is null by default.\nSetting it is a neat way of optimising the hitTest function that the interactionManager\nwill use (as it will not need to hit test all the children)",
            "itemtype": "property",
            "name": "hitArea",
            "type": "Rectangle|Polygon|Circle|Ellipse",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 92,
            "description": "Wether or not the object will handle mouse events",
            "itemtype": "property",
            "name": "interactive",
            "type": "Boolean",
            "default": "false",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 102,
            "description": "Adds a child to the container and returns the child",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 118,
            "description": "Adds a child to the object at a specified index. If the index is out of bounds an error will be thrown",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 135,
            "description": "Removes a child from the object.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 151,
            "description": "Removes a child from the object.",
            "itemtype": "method",
            "name": "removeAllChildren",
            "return": {
                "description": "Returns iteself",
                "type": "Container"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 168,
            "description": "Brings a child to the top of the Z pile",
            "itemtype": "method",
            "name": "bringChildToTop",
            "params": [
                {
                    "name": "child",
                    "description": "Any container or sprite",
                    "type": "Container|Sprite"
                }
            ],
            "return": {
                "description": "The child that was added",
                "type": "Container|Sprite"
            },
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 184,
            "description": "Destroys this objects",
            "itemtype": "method",
            "name": "destroy",
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 212,
            "description": "A callback that is used when the users clicks on the displayObject with their mouse",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 219,
            "description": "A callback that is used when the user clicks the mouse down over the displayObject",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 226,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject\nfor this callback to be fired the mouse must have been pressed down over the displayObject",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 234,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject but is no longer over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "event",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 242,
            "description": "A callback that is used when the users mouse rolls over the displayObject",
            "itemtype": "event",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 249,
            "description": "A callback that is used when the users mouse leaves the displayObject",
            "itemtype": "event",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 256,
            "description": "A callback that is used when the user moves the mouse while over the displayObject",
            "itemtype": "event",
            "name": "mousemove",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 267,
            "description": "A callback that is used when the users taps on the displayObject with their finger\nbasically a touch version of click",
            "itemtype": "event",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 275,
            "description": "A callback that is used when the user touch's over the displayObject",
            "itemtype": "event",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 282,
            "description": "A callback that is used when the user releases a touch over the displayObject",
            "itemtype": "event",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Container.js",
            "line": 289,
            "description": "A callback that is used when the user releases the touch that was over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "event",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Container"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 54,
            "description": "The name of the sprite",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 63,
            "description": "The lifetime of the sprite. Once it reaches 0 (after being set)\nthe sprite's visible property is set to false, so that it will\nno longer be rendered. NOT YET IMPLEMENTED",
            "itemtype": "property",
            "name": "lifetime",
            "type": "Number",
            "default": "Infinity",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 75,
            "description": "The animation speed for this sprite",
            "itemtype": "property",
            "name": "speed",
            "type": "Number",
            "default": "1",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 84,
            "description": "Whether or not to loop the animations. This can be overriden\non a per-animation level",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "false",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 94,
            "description": "The registerd animations for this AnimatedSprite",
            "itemtype": "property",
            "name": "animations",
            "type": "Object",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 103,
            "description": "The currently playing animation",
            "itemtype": "property",
            "name": "currentAnimation",
            "type": "String",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 112,
            "description": "The current frame being shown",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 121,
            "description": "Whether or not the animation is currently playing",
            "itemtype": "property",
            "name": "playing",
            "type": "Boolean",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 139,
            "description": "Creates a new Sprite instance with the same values as this one",
            "itemtype": "method",
            "name": "clone",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 191,
            "description": "Adds a new animation to this animated sprite",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The string name of the animation",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "The array of texture frames",
                    "type": "Array<Texture>"
                },
                {
                    "name": "speed",
                    "description": "The animation speed",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "loop",
                    "description": "Loop the animation or not",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 214,
            "description": "Goes to a frame and starts playing the animation from there. You can optionally\npass the name of a new aniamtion to start playing.",
            "itemtype": "method",
            "name": "goto",
            "params": [
                {
                    "name": "frame",
                    "description": "The index of the frame to start on",
                    "type": "Number"
                },
                {
                    "name": "name",
                    "description": "The string name of the animation to go to",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 240,
            "description": "Starts playing the currently active animation",
            "itemtype": "method",
            "name": "play",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 249,
            "description": "Stops playing the currently active animation",
            "itemtype": "method",
            "name": "stop",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 258,
            "description": "Removes this sprite from the stage and the physics system",
            "itemtype": "method",
            "name": "destroy",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 284,
            "description": "Called by PIXI to update our textures and do the actual animation",
            "itemtype": "method",
            "name": "updateTransform",
            "access": "private",
            "tagname": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 318,
            "description": "Called whenever a collision occurs",
            "itemtype": "method",
            "name": "onCollide",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite that you collide with",
                    "type": "Sprite"
                },
                {
                    "name": "collision",
                    "description": "Collision data object that contains\n     information about the intersection",
                    "type": "Collision"
                }
            ],
            "return": {
                "description": "If you return `false` explicitly the engine will *not*\n     solve the collision. In this way you can make thing \"not collide\" if\n     you don't want their types to collide.",
                "type": "Boolean"
            },
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 349,
            "description": "A callback that is used when the users clicks on the sprite with their mouse",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 356,
            "description": "A callback that is used when the user clicks the mouse down over the sprite",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 363,
            "description": "A callback that is used when the user releases the mouse that was over the sprite\nfor this callback to be fired the mouse must have been pressed down over the sprite",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 371,
            "description": "A callback that is used when the user releases the mouse that was over the sprite but is no longer over the sprite\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "event",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 379,
            "description": "A callback that is used when the users mouse rolls over the sprite",
            "itemtype": "event",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 386,
            "description": "A callback that is used when the users mouse leaves the sprite",
            "itemtype": "event",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 393,
            "description": "A callback that is used when the user moves the mouse while over the sprite",
            "itemtype": "event",
            "name": "mousemove",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 404,
            "description": "A callback that is used when the users taps on the sprite with their finger\nbasically a touch version of click",
            "itemtype": "event",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 412,
            "description": "A callback that is used when the user touch's over the sprite",
            "itemtype": "event",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 419,
            "description": "A callback that is used when the user releases a touch over the sprite",
            "itemtype": "event",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 426,
            "description": "A callback that is used when the user releases the touch that was over the sprite\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "event",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 46,
            "description": "The domElement that we are putting our rendering canvas into (the container)",
            "itemtype": "property",
            "name": "container",
            "type": "DOMELement",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 58,
            "description": "The width of the render viewport",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "800",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 67,
            "description": "The height of the render viewport",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "600",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 76,
            "description": "The method used to render values to the screen (either webgl, or canvas)",
            "itemtype": "property",
            "name": "renderMethod",
            "type": "String",
            "default": "RENDERER.AUTO",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 85,
            "description": "Whether the canvas has a transparent background or not",
            "itemtype": "property",
            "name": "transparent",
            "type": "Boolean",
            "default": "false",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 94,
            "description": "The background of the stage",
            "itemtype": "property",
            "name": "background",
            "type": "Boolean",
            "default": "false",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 103,
            "description": "Anti-alias graphics (in WebGL this helps with edges, in Canvas2D it retains pixel-art quality)",
            "itemtype": "property",
            "name": "antialias",
            "type": "Boolean",
            "default": "true",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 112,
            "description": "The canvas to render into",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 120,
            "description": "Raw rendering engine, the underlying PIXI renderer that draws for us",
            "itemtype": "property",
            "name": "renderer",
            "type": "PIXI.WebGLRenderer|PIXI.CanvasRenderer",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 129,
            "description": "Raw PIXI.stage instance, the root of all things in the scene graph",
            "itemtype": "property",
            "name": "stage",
            "type": "PIXI.Stage",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 138,
            "description": "Clock instance for internal timing",
            "itemtype": "property",
            "name": "clock",
            "type": "Clock",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 147,
            "description": "The audio manager for this game instance, used to play and control\nall the audio in a game.",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioManager",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 157,
            "description": "The loader for this game instance, used to preload assets into the cache",
            "itemtype": "property",
            "name": "loader",
            "type": "Loader",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 166,
            "description": "Cache instance for storing/retrieving assets",
            "itemtype": "property",
            "name": "cache",
            "type": "Cache",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 175,
            "description": "The input instance for this game",
            "itemtype": "property",
            "name": "input",
            "type": "InputManager",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 184,
            "description": "The sprite pool to use to create registered entities",
            "itemtype": "property",
            "name": "spritepool",
            "type": "SpritePool",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 193,
            "description": "The state manager, to switch between game states",
            "itemtype": "property",
            "name": "state",
            "type": "Array",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 202,
            "description": "The offset for the viewport in the document",
            "itemtype": "property",
            "name": "offset",
            "type": "Vector",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 222,
            "description": "Holds timing data for the previous loop",
            "itemtype": "property",
            "name": "timings",
            "type": "Object",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 276,
            "description": "Allows you to resize the game area",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width to resize to",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height to resize to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 298,
            "description": "Requests that the browser go into fullscreen mode",
            "itemtype": "method",
            "name": "requestFullscreen",
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 317,
            "description": "Begins the render loop",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 329,
            "description": "The looping render tick",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 373,
            "description": "Alias for the active State's physics object. Instead of using\n`game.state.active.physics`, you can use `game.physics`",
            "itemtype": "property",
            "name": "physics",
            "type": "Physics",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 387,
            "description": "Alias for the active State's camera object. Instead of using\n`game.state.active.camera`, you can use `game.camera`",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 401,
            "description": "Alias for the active State's world object. Instead of using\n`game.state.active.world`, you can use `game.world`",
            "itemtype": "property",
            "name": "world",
            "type": "World",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\State.js",
            "line": 29,
            "description": "The name of this game state",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 37,
            "description": "The game instance that this state belongs too, will be set\nwhen setup() is called with a game instance.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 46,
            "description": "The audio manager for this game state",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioManager",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 55,
            "description": "The container that holds all non-gui sprites and the tilemap",
            "itemtype": "property",
            "name": "world",
            "type": "Tilemap",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 64,
            "description": "The physics system to simulate the world physics",
            "itemtype": "property",
            "name": "physics",
            "type": "Physics",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 73,
            "description": "The camera you view the scene through, will be set\nwhen setup() is called with a game instance.",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 98,
            "description": "Enables (shows) the game state",
            "itemtype": "method",
            "name": "enable",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 108,
            "description": "Disables (hides) the game state",
            "itemtype": "method",
            "name": "disable",
            "class": "State"
        },
        {
            "file": "src\\game\\State.js",
            "line": 122,
            "description": "Called by the game each frame to update the camera object",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "class": "State"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 12,
            "description": "The game instance that this manager belongs to.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 20,
            "description": "The states managed by this manager, keyed on the state name",
            "itemtype": "property",
            "name": "states",
            "type": "Object<State>",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 28,
            "description": "The currently active state",
            "itemtype": "property",
            "name": "active",
            "type": "State",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\StateManager.js",
            "line": 36,
            "description": "The count of states in this manager",
            "itemtype": "property",
            "name": "count",
            "type": "Number",
            "class": "StateManager"
        },
        {
            "file": "src\\game\\World.js",
            "line": 17,
            "description": "The game instance this world belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 25,
            "description": "The game state this world belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "State",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 33,
            "description": "The particle system for the world",
            "itemtype": "property",
            "name": "particles",
            "type": "ParticleSystem",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 41,
            "description": "The bounds of the world",
            "itemtype": "property",
            "name": "bounds",
            "type": "Rectangle",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 49,
            "description": "An object factory for creating game objects",
            "itemtype": "property",
            "name": "add",
            "type": "ObjectFactory",
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 59,
            "description": "Pans the world around",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Vector is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "World"
            },
            "class": "World"
        },
        {
            "file": "src\\game\\World.js",
            "line": 83,
            "description": "Resizes the children of the world, called by game.resize()",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width to resize to",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height to resize to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "World"
            },
            "class": "World"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 15,
            "description": "The center of the circle",
            "itemtype": "property",
            "name": "position",
            "type": "Vector",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 23,
            "description": "The radius of the circle",
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 41,
            "description": "Creates a clone of this Circle instance",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Circle"
            },
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 51,
            "description": "Checks if the x, and y coords passed to this function are contained within this circle,\nor on the edge of the circle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 75,
            "description": "The center X coord of the circle",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Circle.js",
            "line": 91,
            "description": "The center Y coord of the circle",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Circle"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 19,
            "description": "The origin point of the polygon, all points are relative to this",
            "itemtype": "property",
            "name": "position",
            "type": "Vector",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 27,
            "description": "The points of the polygon, the X & Y values here should be\nrelative to the origin X & Y values.",
            "itemtype": "property",
            "name": "points",
            "type": "Array<Vector>",
            "default": "[]",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 37,
            "description": "These vectors are calculated by `this.recalc()` and represent the edges\nof the polygon defined by it's points.",
            "itemtype": "property",
            "name": "edges",
            "type": "Array<Vector>",
            "default": "[]",
            "readonly": "",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 48,
            "description": "These vectors are calculated by `this.recalc()` and represent the normals\nof the polygon edges defined by it's points.",
            "itemtype": "property",
            "name": "normals",
            "type": "Array<Vector>",
            "default": "[]",
            "readonly": "",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 89,
            "description": "Creates a clone of this polygon",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the polygon",
                "type": "Polygon"
            },
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 104,
            "description": "Checks if the x, and y coords passed to this function are contained within this polygon",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this polygon",
                "type": "Boolean"
            },
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 128,
            "description": "Recalculates the edges and normals of this polygon based on the points",
            "itemtype": "method",
            "name": "recalc",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 152,
            "description": "The origin X coord of the polygon",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Polygon.js",
            "line": 168,
            "description": "The origin Y coord of the polygon",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Polygon"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 20,
            "itemtype": "property",
            "name": "position",
            "type": "Vector",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 31,
            "itemtype": "property",
            "name": "_width",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 39,
            "itemtype": "property",
            "name": "_height",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 47,
            "itemtype": "property",
            "name": "halfWidth",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 54,
            "itemtype": "property",
            "name": "halfHeight",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 66,
            "description": "Creates a clone of this Rectangle",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a copy of the rectangle",
                "type": "Rectangle"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 76,
            "description": "Checks if the x, and y coords passed to this function are contained within this Rectangle",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "The X coord of the point to test",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The Y coord of the point to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the x/y coords are within this Rectangle",
                "type": "Boolean"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 100,
            "description": "Checks if this rectangle overlaps another",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle to check if this overlaps",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "if the rectangle overlaps",
                "type": "Boolean"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 114,
            "description": "Returns a polygon from this rectangle's points",
            "itemtype": "method",
            "name": "toPolygon",
            "return": {
                "description": "",
                "type": "Polygon"
            },
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 130,
            "description": "The top-left X coord of the rectangle",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 146,
            "description": "The top-left Y coord of the rectangle",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 163,
            "description": "The width of the object",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 180,
            "description": "The height of the object",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "defualt": "0",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 197,
            "description": "Returns the right most X coord",
            "itemtype": "property",
            "name": "right",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 210,
            "description": "Returns the left most X coord",
            "itemtype": "property",
            "name": "left",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 223,
            "description": "Returns the top most Y coord",
            "itemtype": "property",
            "name": "top",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\geom\\Rectangle.js",
            "line": 236,
            "description": "Returns the bottom most Y coord",
            "itemtype": "property",
            "name": "bottom",
            "type": "Number",
            "readonly": "",
            "class": "Rectangle"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 14,
            "description": "Sets whether or not you can drag the GuiItem around",
            "itemtype": "property",
            "name": "draggable",
            "type": "Boolean",
            "default": "false",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 23,
            "description": "Describes if the current item is being dragged or not, if it is this\nobject will hold the last local position of the mouse (relative to this object's parent)",
            "itemtype": "property",
            "name": "dragging",
            "type": "Object",
            "default": "false",
            "readonly": "",
            "class": "GuiItem"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 14,
            "description": "The threshold at which we consider a button \"pressed\"",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.4",
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 23,
            "description": "Track the status of each button",
            "itemtype": "property",
            "name": "buttons",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 44,
            "description": "Polls the gamepad object for status updates and emits events when they occur",
            "itemtype": "method",
            "name": "pollStatus",
            "params": [
                {
                    "name": "pad",
                    "description": "The gamepad object to check",
                    "type": "Gamepad"
                }
            ],
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadButtons.js",
            "line": 67,
            "description": "Bindable Gamepad Buttons",
            "itemtype": "property",
            "name": "GP_BUTTON",
            "type": "Object",
            "static": 1,
            "class": "GamepadButtons"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 14,
            "description": "The threshold at which we consider a stick moved from center",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.5",
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 23,
            "description": "Track the status of each of the axes",
            "itemtype": "property",
            "name": "axes",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 43,
            "description": "Polls the gamepad object for status updates and emits events when they occur",
            "itemtype": "method",
            "name": "pollStatus",
            "params": [
                {
                    "name": "pad",
                    "description": "The gamepad object to check",
                    "type": "Gamepad"
                }
            ],
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\gamepad\\GamepadSticks.js",
            "line": 68,
            "description": "Bindable Gamepad Axes",
            "itemtype": "property",
            "name": "GP_AXIS",
            "type": "Object",
            "static": 1,
            "class": "GamepadSticks"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 16,
            "description": "Tracks if we are polling for status/connections",
            "itemtype": "property",
            "name": "ticking",
            "type": "Boolean",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 25,
            "description": "The currently activated gamepads list",
            "itemtype": "property",
            "name": "pads",
            "type": "Array<Gamepad>",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 34,
            "description": "Timestamp tracking for state changes",
            "itemtype": "property",
            "name": "prevTimestamps",
            "type": "Array<Number>",
            "access": "private",
            "tagname": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 43,
            "description": "Holds the button handler for gamepad button events",
            "itemtype": "property",
            "name": "buttons",
            "type": "GamepadButtons",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 52,
            "description": "Holds the stick handler for gamepad stick events",
            "itemtype": "property",
            "name": "sticks",
            "type": "GamepadSticks",
            "readonly": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 72,
            "description": "Called when a gamepad connects (FF Only)",
            "itemtype": "method",
            "name": "onGamepadDisconnect",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "GamepadConnectEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 86,
            "description": "Called when a gamepad disconnects (FF Only)",
            "itemtype": "method",
            "name": "onGamepadDisconnect",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "GamepadDisconnectEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 106,
            "description": "Stats polling for new gamepads and status updates",
            "itemtype": "method",
            "name": "startPolling",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 117,
            "description": "Stops polling for new gamepads and status updates",
            "itemtype": "method",
            "name": "stopPolling",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 125,
            "description": "Polls for newly connected gamepads (Chrome Only)",
            "itemtype": "method",
            "name": "pollGamepads",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 148,
            "description": "Polls the gamepad object for status updates and emits events when they occur",
            "itemtype": "method",
            "name": "pollStatus",
            "params": [
                {
                    "name": "pad",
                    "description": "The gamepad object to check",
                    "type": "Gamepad"
                }
            ],
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Gamepad.js",
            "line": 168,
            "description": "Called each frame to update polling mechanisms",
            "itemtype": "method",
            "name": "update",
            "class": "Gamepad"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 16,
            "description": "The game instance this input belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Input"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 15,
            "description": "The game instance this manager belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 23,
            "description": "The dom element to bind events to",
            "itemtype": "property",
            "name": "canvas",
            "type": "Game",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 31,
            "description": "Holds the keyboard handler for keyboard events",
            "itemtype": "property",
            "name": "keyboard",
            "type": "Keyboard",
            "readonly": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 40,
            "description": "Holds the pointer handler for pointer events",
            "itemtype": "property",
            "name": "pointer",
            "type": "Pointer",
            "readonly": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 49,
            "description": "Holds the gamepad handler for gamepad events",
            "itemtype": "property",
            "name": "gamepad",
            "type": "Keyboard",
            "readonly": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 60,
            "description": "Called each frame to update state info for some input methods",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "class": "InputManager"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 15,
            "description": "The current sequence of keys that have been pressed",
            "itemtype": "property",
            "name": "sequence",
            "type": "Array<Number>",
            "readonly": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 24,
            "description": "The amount of time it takes for the sequence to clear out, in ms",
            "itemtype": "property",
            "name": "sequenceTimeout",
            "type": "Number",
            "default": "500",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 33,
            "description": "The timeout ID for the wait to clear the input sequence",
            "itemtype": "property",
            "name": "_clearSq",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 47,
            "description": "Called when a key is pressed down",
            "itemtype": "method",
            "name": "onKeyDown",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                },
                {
                    "name": "override",
                    "description": "The key code to use instead of checking event data",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 59,
            "description": "Called when a key is released",
            "itemtype": "method",
            "name": "onKeyUp",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                },
                {
                    "name": "override",
                    "description": "The key code to use instead of checking event data",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 71,
            "description": "Called when a key state has changed, updates current sequence and emits events",
            "itemtype": "method",
            "name": "modifyKey",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "DOMEvent"
                },
                {
                    "name": "key",
                    "description": "The key code that has changed",
                    "type": "Number"
                },
                {
                    "name": "down",
                    "description": "Whether the key has been pressed or not",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 100,
            "description": "Generates an event data object for a keyboard event",
            "itemtype": "method",
            "name": "_getEventData",
            "params": [
                {
                    "name": "event",
                    "description": "The original DOMEvent that was passed into the raw event handler",
                    "type": "DOMEvent"
                },
                {
                    "name": "down",
                    "description": "Is this a keydown event",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The event object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 116,
            "description": "Clears the current sequence so that a new one can start",
            "itemtype": "method",
            "name": "_clearSequence",
            "access": "private",
            "tagname": "",
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 127,
            "description": "Bindable keycodes",
            "itemtype": "property",
            "name": "KEY",
            "type": "Object",
            "static": 1,
            "class": "Keyboard"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 17,
            "description": "The pointer instances currently being used",
            "itemtype": "property",
            "name": "pointers",
            "type": "Array<Pointer>",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 25,
            "description": "The max number of pointers to track",
            "itemtype": "property",
            "name": "maxPointers",
            "type": "Number",
            "default": "10",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 34,
            "description": "The time that must pass between a down (touchstart/mousedown) and up (touchend/mouseup)\nevent for it to be considered a \"click\" event, in milliseconds",
            "itemtype": "property",
            "name": "clickDelay",
            "type": "Number",
            "default": "200",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 44,
            "description": "The max time that can pass between two click events for it to be considered a\n\"doubleclick\" event, in milliseconds",
            "itemtype": "property",
            "name": "doubleClickDelay",
            "type": "Number",
            "default": "300",
            "class": "Pointers"
        },
        {
            "file": "src\\input\\Pointers.js",
            "line": 54,
            "description": "The time that must pass after a down event for it to be considered a \"hold\" event, in milliseconds",
            "itemtype": "property",
            "name": "holdDelay",
            "type": "Number",
            "default": "2000",
            "class": "Pointers"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 24,
            "description": "The game instance this loader belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 32,
            "description": "The array of asset keys",
            "itemtype": "property",
            "name": "assets",
            "type": "Array",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 40,
            "description": "The asset data",
            "itemtype": "property",
            "name": "assets",
            "type": "Array",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 48,
            "description": "Number of assets total to load",
            "itemtype": "property",
            "name": "total",
            "type": "Number",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 56,
            "description": "Number of assets done to load (for progress)",
            "itemtype": "property",
            "name": "done",
            "type": "Number",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 64,
            "description": "Whether the loader is actively loading the assets",
            "itemtype": "property",
            "name": "isLoading",
            "type": "Boolean",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 72,
            "description": "Whether the loader has finished loading",
            "itemtype": "property",
            "name": "isLoading",
            "type": "Boolean",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 80,
            "description": "The progress of the loader (0 - 100)",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 88,
            "description": "The cross origin value for loading images",
            "itemtype": "property",
            "name": "crossOrigin",
            "type": "String",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 96,
            "description": "The base URL to prepend to a url, requires the trailing slash",
            "itemtype": "property",
            "name": "baseUrl",
            "type": "String",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 104,
            "description": "Fired if a loader encounters an error",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "assetType",
                            "description": "The type of asset",
                            "type": "String"
                        },
                        {
                            "name": "message",
                            "description": "The message of the error",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 113,
            "description": "Fired when an item has loaded",
            "itemtype": "event",
            "name": "progress",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "assetType",
                            "description": "The type of asset",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "The url the asset loaded from",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The data that was loaded",
                            "type": "Mixed"
                        }
                    ]
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 123,
            "description": "Fired when all the assets have loaded",
            "itemtype": "event",
            "name": "complete",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 131,
            "description": "Check whether asset exists with a specific key.",
            "itemtype": "method",
            "name": "hasKey",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the asset you want to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return true if exists, otherwise return false.",
                "type": "Bool"
            },
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 142,
            "description": "Reset loader, this will remove all loaded assets.",
            "itemtype": "method",
            "name": "reset",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 157,
            "description": "Adds an asset to be loaded",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "type",
                    "description": "The type of asset ot load (image, spritesheet, textureatlas, bitmapfont, tilemap, tileset, audio, etc)",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The unique key of the asset to identify it",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Extra options to apply to the asset (such as crossOrigin)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "crossOrigin",
                            "description": "True if an image load should be treated as crossOrigin",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 189,
            "description": "Add an image to the Loader.",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 202,
            "description": "Add a text file to the Loader.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 215,
            "description": "Add a sprite sheet image to the Loader.",
            "itemtype": "method",
            "name": "spritesheet",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "URL of image file.",
                    "type": "String"
                },
                {
                    "name": "frameWidth",
                    "description": "Width of each single frame.",
                    "type": "Number"
                },
                {
                    "name": "frameHeight",
                    "description": "Height of each single frame.",
                    "type": "Number"
                },
                {
                    "name": "numFrames",
                    "description": "How many frames in this sprite sheet.",
                    "type": "Number"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 235,
            "description": "Add an audio file to the Loader.",
            "itemtype": "method",
            "name": "audio",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of this image file.",
                    "type": "String"
                },
                {
                    "name": "urls",
                    "description": "URLs of audio files.",
                    "type": "Array<String>"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 248,
            "description": "Add a tilemap to the Loader.",
            "itemtype": "method",
            "name": "tilemap",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the tilemap data.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url of the map data file (csv/json/xml)",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data for the map, (to use instead of loading from a URL)",
                    "type": "String|Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "The format of the map data.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "FILE_FORMAT.JSON"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 284,
            "description": "Add a bitmap font to the Loader.",
            "itemtype": "method",
            "name": "bitmapFont",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the bitmap font.",
                    "type": "String"
                },
                {
                    "name": "textureURL",
                    "description": "The url of the font image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the font data file (xml/fnt)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "An optional XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "The format of the bitmap font data.",
                    "type": "FILE_FORMAT",
                    "optional": true,
                    "optdefault": "FILE_FORMAT.XML"
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 330,
            "description": "Add a new texture atlas loading request.",
            "params": [
                {
                    "name": "key",
                    "description": "Unique asset key of the texture atlas file.",
                    "type": "String"
                },
                {
                    "name": "textureUrl",
                    "description": "The url of the texture atlas image file.",
                    "type": "String"
                },
                {
                    "name": "dataUrl",
                    "description": "The url of the texture atlas data file (json/xml)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "A JSON or XML data object (to use instead of loading from a URL)",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "format",
                    "description": "A value describing the format of the data.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "overwrite",
                    "description": "If an entry with a matching key already exists this will over-write it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 364,
            "description": "Starts the loading of all the assets added",
            "itemtype": "method",
            "name": "start",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 388,
            "description": "Loads a single asset from the assets in this Loader.",
            "itemtype": "method",
            "name": "loadFile",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 474,
            "description": "Chooses the audio url to use based on browser support",
            "itemtype": "method",
            "name": "getAudioUrl",
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 493,
            "description": "Error occured when load a file.",
            "itemtype": "method",
            "name": "fileError",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the error loading file.",
                    "type": "String"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 510,
            "description": "Called when a file is successfully loaded.",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the successfully loaded file.",
                    "type": "String"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\loader\\Loader.js",
            "line": 583,
            "description": "Called when a file is done (error or loaded)",
            "itemtype": "method",
            "name": "fileDone",
            "params": [
                {
                    "name": "key",
                    "description": "Key of the file done",
                    "type": "String"
                },
                {
                    "name": "fail",
                    "description": "Whether this was a failure or not",
                    "type": "Boolean"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "src\\math\\QuadTree.js",
            "line": 64,
            "description": "Split the node into 4 subnodes",
            "itemtype": "method",
            "name": "split",
            "class": "Vector"
        },
        {
            "file": "src\\math\\QuadTree.js",
            "line": 86,
            "description": "Insert an object into the node. If the node exceeds the max capacity, it will split and add all\nobjects to their corresponding subnodes.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "body",
                    "description": "The physics body to add to the tree",
                    "type": "Body"
                }
            ],
            "class": "Vector"
        },
        {
            "file": "src\\math\\QuadTree.js",
            "line": 129,
            "description": "Determine which node the object belongs to",
            "itemtype": "method",
            "name": "getIndex",
            "params": [
                {
                    "name": "body",
                    "description": "The body to check for which quad it goes into",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "Number Index of the subnode (0-3), or -1 if the body cannot completely fit within a subnode and is part of the parent node"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\QuadTree.js",
            "line": 166,
            "description": "Return all objects that could collide with the given body",
            "itemtype": "method",
            "name": "retrieve",
            "params": [
                {
                    "name": "body",
                    "description": "The body to be checked",
                    "type": "Body"
                }
            ],
            "return": {
                "description": "Array<Body> Array with all detected bodies"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\QuadTree.js",
            "line": 194,
            "description": "Clear the quadtree, removing all bodies",
            "itemtype": "method",
            "name": "clear",
            "class": "Vector"
        },
        {
            "file": "src\\math\\QuadTree.js",
            "line": 213,
            "description": "Sets the bounds of the quad tree",
            "itemtype": "method",
            "name": "setBounds",
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 19,
            "description": "Sets the value of the vector",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 33,
            "description": "Sets the X value of the vector",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 45,
            "description": "Sets the Y value of the vector",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 57,
            "description": "Sets a component value of the vector",
            "itemtype": "method",
            "name": "setComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to set the component to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 79,
            "description": "Gets a component value of the vector",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the component value",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 96,
            "description": "Copies the passed vector's components to this vector",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to copy the values from",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 109,
            "description": "Floors the vector components",
            "itemtype": "method",
            "name": "floor",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 121,
            "description": "Ceils the vector components",
            "itemtype": "method",
            "name": "ceil",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 133,
            "description": "Adds a vector to this one",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to add to this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 146,
            "description": "Adds two vectors to each other and stores the result in this vector",
            "itemtype": "method",
            "name": "addVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 160,
            "description": "Adds a scalar value to the x and y components of this vector",
            "itemtype": "method",
            "name": "addScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The scalar value to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 173,
            "description": "Subtracts a vector from this one",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to subtract from this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 186,
            "description": "Subtracts two vectors from each other and stores the result in this vector",
            "itemtype": "method",
            "name": "subVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 200,
            "description": "Multiplies the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "multiplyScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to multiply by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 213,
            "description": "Divides the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "divideScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to divide by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 230,
            "description": "Sets this vector components to the minimum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 248,
            "description": "Sets this vector components to the maximum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 266,
            "description": "Clamps the vectors components to be between min and max",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value a component can be",
                    "type": "Vector"
                },
                {
                    "name": "max",
                    "description": "The maximum value a component can be",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 291,
            "description": "Negates this vector (multiplies by -1)",
            "itemtype": "method",
            "name": "negate",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 300,
            "description": "Project this vector on to another vector.",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to project onto.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 313,
            "description": "Project this vector onto a vector of unit length.",
            "params": [
                {
                    "name": "v",
                    "description": "The unit vector to project onto.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 326,
            "description": "Reflect this vector on an arbitrary axis.",
            "params": [
                {
                    "name": "axis",
                    "description": "The vector representing the axis.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 341,
            "description": "Reflect this vector on an arbitrary axis (represented by a unit vector)",
            "params": [
                {
                    "name": "axis",
                    "description": "The unit vector representing the axis.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 356,
            "description": "Performs the dot product between this vector and the passed one and returns the result",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns the dot product",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 366,
            "description": "Calculates the square length of the vector",
            "itemtype": "method",
            "name": "lengthSq",
            "return": {
                "description": "Returns the square length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 375,
            "description": "Calculates the length of the vector",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "Returns the length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 384,
            "description": "Normalizes this vector (divides by its length)",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "Returns the normalized vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 393,
            "description": "Calculates the distance to the passed vector",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to check distance to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 403,
            "description": "Calculates the square distance to the passed vector",
            "itemtype": "method",
            "name": "distanceToSquared",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to check distance to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The square distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 414,
            "description": "Sets the length of the vector",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "length",
                    "description": "The length to set this vector to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 430,
            "description": "Performs a linear interpolation between this vector and the passed vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to interpolate with",
                    "type": "Vector"
                },
                {
                    "name": "alpha",
                    "description": "The amount to interpolate [0-1] or extrapolate (1-]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 444,
            "description": "Rotates the vector by 90 degrees",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 456,
            "description": "Checks if this vector is equal to another",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare with",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 466,
            "description": "Returns an array with the components of this vector as the elements",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "Returns an array of [x,y] form",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\Vector.js",
            "line": 475,
            "description": "Creates a new instance of Vector, with the same components as this vector",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Returns a new Vector with the same values",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\math\\math.js",
            "line": 17,
            "description": "Alias some native functions for great justice (or incase we want to override)",
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 21,
            "description": "Applys a Floor operation to a value, currently uses native Math.floor\nsince it deals with all edge cases",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "num",
                    "description": "The number to floor",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The floored value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 30,
            "description": "Applys a Ceiling operation to a value, currently uses native Math.ceil\nsince it deals with all edge cases",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "num",
                    "description": "The number to ceil",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ceiling value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 39,
            "description": "Generates a random number between 0 and 1, NON DETERMINISTIC",
            "itemtype": "method",
            "name": "random",
            "return": {
                "description": "The random value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 46,
            "description": "Returns the absolute value of a number, currently uses native Math.abs\nsince it is more performant than tricks you can use.\nsee:\n     http://jsperf.com/math-abs-vs-bitwise/7\n     http://jsperf.com/abs-value\n     http://jsperf.com/math-abs-vs-bitwise/3",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "num",
                    "description": "The number to get the absolute value for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The absolute value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 59,
            "description": "Returns the square root of a number, currently uses native Math.sqrt",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "num",
                    "description": "The number to get the sqrt of",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sqrt value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 67,
            "description": "Returns the min of the values passed",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number...",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The min value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 75,
            "description": "Returns the max of the values passed",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number...",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The max value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 83,
            "description": "Quickly rounds a number. This is about twice as fast as Math.round()",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "num",
                    "description": "The number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The rounded value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 93,
            "description": "Clamps a number between two values.",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "num",
                    "description": "The number to clamp",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "The minimum value the number is allowed to be",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value the number is allowed to be",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The clamped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 105,
            "description": "Truncates the decimal from a number",
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "num",
                    "description": "The number to truncate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The truncated value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 115,
            "description": "Snaps a number to a grid value.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 10; a position of 18 would snap to 20",
            "itemtype": "method",
            "name": "snap",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 136,
            "description": "Snaps a number to a grid value, using floor.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 10; a position of 18 would also snap to 10",
            "itemtype": "method",
            "name": "snapFloor",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 157,
            "description": "Snaps a number to a grid value, using ceiling.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 20; a position of 18 would also snap to 20",
            "itemtype": "method",
            "name": "snapCeil",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 178,
            "description": "Convert radians to degrees",
            "itemtype": "method",
            "name": "radiansToDegrees",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The angle in degrees",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 188,
            "description": "Convert radians to degrees",
            "itemtype": "method",
            "name": "degreesToRadians",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in degrees to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 198,
            "description": "Calculates the angle between two points",
            "itemtype": "method",
            "name": "angleBetween",
            "params": [
                {
                    "name": "pos1",
                    "description": "The first position",
                    "type": "Vector|Point"
                },
                {
                    "name": "pos2",
                    "description": "The second position",
                    "type": "Vector|Point"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 209,
            "description": "Returns a random boolean based on the provided chance. The chance represents the\npercentage chance of returning: true.",
            "itemtype": "method",
            "name": "randomBool",
            "params": [
                {
                    "name": "chance",
                    "description": "The % chance of getting true (0 - 100), defaults to 50%",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "50"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 232,
            "description": "Returns a random int between min and max.",
            "itemtype": "method",
            "name": "randomInt",
            "params": [
                {
                    "name": "min",
                    "description": "The minimun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The maximun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 249,
            "description": "Returns a random real number between min and max.",
            "itemtype": "method",
            "name": "randomReal",
            "params": [
                {
                    "name": "min",
                    "description": "The minimun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The maximun number that the result can be",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 266,
            "description": "Returns a random sign based on the provided chance. The chance represents the\npercentage chance of returning 1 (positive).",
            "itemtype": "method",
            "name": "randomSign",
            "params": [
                {
                    "name": "chance",
                    "description": "The % chance of getting positive (0 - 100), defaults to 50%",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either 1 or -1",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 277,
            "description": "Returns a random string based on a random value between 0 and 1, multiplied\nby the current date. Ex: \"1158014093337\", \"86371874178\", etc",
            "itemtype": "method",
            "name": "randomString",
            "return": {
                "description": "A random string",
                "type": "String"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 287,
            "description": "Generates a random RFC4122 compliant (v4) UUID",
            "itemtype": "method",
            "name": "randomUuid",
            "return": {
                "description": "A random guid",
                "type": "String"
            },
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 325,
            "description": "Fills a Typed Array with random bytes. If you do not pass an output param, then a default\nUint8Array(16) is created and returned for you.",
            "itemtype": "method",
            "name": "randomBytes",
            "params": [
                {
                    "name": "output",
                    "description": "The output array for the random data, if none specified a new Uint8Array(16) is created",
                    "type": "TypedArray",
                    "optional": true
                }
            ],
            "class": "math"
        },
        {
            "file": "src\\math\\math.js",
            "line": 337,
            "description": "Returns a random element of an array.",
            "itemtype": "method",
            "name": "randomElement",
            "params": [
                {
                    "name": "array",
                    "description": "The array to choose from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "The index of the first element to include, defaults to 0",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "The index of the last element to include, defaults to array.length - 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either 1 or -1",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 59,
            "description": "Starts the particle emission, must call `setup` first to setup\nwhat kind of particle to emit.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "lifespan",
                    "description": "The lifespan of a particle in ms",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "Infinity"
                },
                {
                    "name": "delay",
                    "description": "The time between each particle emission in ms",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "250"
                },
                {
                    "name": "rate",
                    "description": "The number of particles to emit each emission",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "total",
                    "description": "The total number of particles to emit",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gf.PARTICLES.MAX_EMITTER_PARTICLES"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 79,
            "description": "Deactivates the emitter. Particles that are already emitted will continue to\ndecay and die, but no new particles will be emitted.",
            "itemtype": "method",
            "name": "stop",
            "class": "BitmapText"
        },
        {
            "file": "src\\particles\\ParticleEmitter.js",
            "line": 88,
            "description": "Sets up the particles to be emitted",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "sprite",
                    "description": "Pass a sprite to be clones as a particle,\n     or an array of textures to be randomly chosen from for different particles,\n     or a single texture to use for each particle.",
                    "type": "Sprite|Array<Texture>|Texture"
                },
                {
                    "name": "collide",
                    "description": "The directions the particles are allowed to collide in, use gf.DIRECTION bit flags",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "gf.DIRECTION.ALL"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 11,
            "description": "Pool of Vectors used in calculations.",
            "type": "{Array<Vector>}",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 20,
            "description": "Pool of Arrays used in calculations.",
            "type": "{Array<Array<mixed>>}",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 32,
            "description": "The maximum objects the quad tree will tolerate in a single quadrant",
            "itemtype": "property",
            "name": "maxObjects",
            "type": "Number",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 40,
            "description": "The maximum levels deep the quad tree will go to",
            "itemtype": "property",
            "name": "maxLevels",
            "type": "Number",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 48,
            "description": "The QuadTree used to help detect likely collisions",
            "itemtype": "property",
            "name": "tree",
            "type": "QuadTree",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 56,
            "description": "The bodies that have been added to this physics system",
            "itemtype": "property",
            "name": "tree",
            "type": "QuadTree",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 64,
            "description": "The gravity that the system will simulate",
            "itemtype": "property",
            "name": "gravity",
            "type": "Vector",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 76,
            "description": "Called each frame by the engine to calculate the quadtree, and update physical bodies",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "The delta in seconds since the last call",
                    "type": "Number"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 286,
            "description": "Adds a sprite to the physics simulation",
            "itemtype": "method",
            "name": "addSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to add to the simulation",
                    "type": "Sprite"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 296,
            "description": "Removes a sprite from the physics simulation",
            "itemtype": "method",
            "name": "removeSprite",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to remove from the simulation",
                    "type": "Sprite"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 306,
            "description": "Adds a body to the physics simulation",
            "itemtype": "method",
            "name": "addBody",
            "params": [
                {
                    "name": "body",
                    "description": "The body to add to the simulation",
                    "type": "Body"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 315,
            "description": "Removes a body from the physics simulation",
            "itemtype": "method",
            "name": "removeSprite",
            "params": [
                {
                    "name": "body",
                    "description": "The body to remove from the simulation",
                    "type": "Body"
                }
            ],
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 328,
            "description": "Shape testing functions",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 331,
            "description": "Check if two circles intersect.",
            "params": [
                {
                    "name": "a",
                    "description": "The first circle.",
                    "type": "Circle"
                },
                {
                    "name": "b",
                    "description": "The second circle.",
                    "type": "Circle"
                },
                {
                    "name": "response",
                    "description": "Collision object (optional) that will be populated if the circles intersect.",
                    "type": "Collision",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if the circles intersect, false if they don't.",
                "type": "Boolean"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 367,
            "description": "Check if a polygon and a circle intersect.",
            "params": [
                {
                    "name": "polygon",
                    "description": "The polygon.",
                    "type": "Polygon"
                },
                {
                    "name": "circle",
                    "description": "The circle.",
                    "type": "Circle"
                },
                {
                    "name": "response",
                    "description": "Collision object (optional) that will be populated if they interset.",
                    "type": "Collision",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if they intersect, false if they don't.",
                "type": "Boolean"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 513,
            "description": "Check if a circle and a polygon intersect.\n\nNOTE: This runs slightly slower than polygonCircle as it just\nruns polygonCircle and reverses everything at the end.",
            "params": [
                {
                    "name": "circle",
                    "description": "The circle.",
                    "type": "Circle"
                },
                {
                    "name": "Polygon",
                    "description": "The polygon.",
                    "type": "Polygon"
                },
                {
                    "name": "response",
                    "description": "Collision object (optional) that will be populated if they interset.",
                    "type": "Collision",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if they intersect, false if they don't.",
                "type": "Boolean"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 542,
            "description": "Checks whether two convex, clockwise polygons intersect.",
            "params": [
                {
                    "name": "a",
                    "description": "The first polygon.",
                    "type": "Polygon"
                },
                {
                    "name": "b",
                    "description": "The second polygon.",
                    "type": "Polygon"
                },
                {
                    "name": "response",
                    "description": "Collision object (optional) that will be populated if they interset.",
                    "type": "Collision",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if they intersect, false if they don't.",
                "type": "Boolean"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 582,
            "description": "Utility functions",
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 585,
            "description": "Flattens the specified array of points onto a unit vector axis,\nresulting in a one dimensional range of the minimum and\nmaximum value on that axis.",
            "params": [
                {
                    "name": "points",
                    "description": "The points to flatten.",
                    "type": "Array<Vector>"
                },
                {
                    "name": "normal",
                    "description": "The unit vector axis to flatten on.",
                    "type": "Vector"
                },
                {
                    "name": "result",
                    "description": "After calling this function,\n  result[0] will be the minimum value,\n  result[1] will be the maximum value.",
                    "type": "Array<Number>",
                    "optional": true
                }
            ],
            "return": {
                "description": "If you do not pass a `result` array, a new one is created for you",
                "type": "Array"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 616,
            "description": "Check whether two convex clockwise polygons are separated by the specified\naxis (must be a unit vector).",
            "params": [
                {
                    "name": "aPos",
                    "description": "The position of the first polygon.",
                    "type": "Vector"
                },
                {
                    "name": "bPos",
                    "description": "The position of the second polygon.",
                    "type": "Vector"
                },
                {
                    "name": "aPoints",
                    "description": "The points in the first polygon.",
                    "type": "Array<Vector>"
                },
                {
                    "name": "bPoints",
                    "description": "The points in the second polygon.",
                    "type": "Array<Vector>"
                },
                {
                    "name": "axis",
                    "description": "The axis (unit sized) to test against. The points of both polygons\n     will be projected onto this axis.",
                    "type": "Vector"
                },
                {
                    "name": "response",
                    "description": "A Collision object (optional) which will be populated\n     if the axis is not a separating axis.",
                    "type": "Collision=",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if it is a separating axis, false otherwise. If false,\n     and a response is passed in, information about how much overlap and\n     the direction of the overlap will be populated.",
                "type": "Boolean"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\physics\\Physics.js",
            "line": 713,
            "description": "Calculates which Vornoi region a point is on a line segment.\nIt is assumed that both the line and the point are relative to (0, 0)\n\n            |       (0)      |\n     (-1)  [0]--------------[1]  (1)\n            |       (0)      |",
            "params": [
                {
                    "name": "line",
                    "description": "The line segment.",
                    "type": "Vector"
                },
                {
                    "name": "point",
                    "description": "The point.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "LEFT_VORNOI_REGION (-1) if it is the left region,\n         MIDDLE_VORNOI_REGION (0) if it is the middle region,\n         RIGHT_VORNOI_REGION (1) if it is the right region.",
                "type": "Number"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 36,
            "description": "The sprite pool to grab character sprites from",
            "itemtype": "property",
            "name": "sprites",
            "type": "ObjectPool",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 59,
            "description": "Renders the text character sprites when the text is dirty. This is\nautomatically called when the text/style becomes dirty",
            "itemtype": "method",
            "name": "renderText",
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 154,
            "description": "Clones this font to get another just like it",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "BitmapText"
            },
            "class": "BitmapText"
        },
        {
            "file": "src\\text\\BitmapText.js",
            "line": 166,
            "description": "Updates the text when dirty",
            "itemtype": "method",
            "name": "updateTransform",
            "access": "private",
            "tagname": "",
            "class": "BitmapText"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 23,
            "description": "The map instance this object group belongs to",
            "itemtype": "property",
            "name": "map",
            "type": "Tilemap",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 31,
            "description": "The game instance this object group belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 39,
            "description": "The state instance this object group belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 47,
            "description": "The name of the group",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 56,
            "description": "The color to display objects in this group",
            "itemtype": "property",
            "name": "color",
            "type": "",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 64,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 72,
            "description": "The objects in this group that can be spawned",
            "itemtype": "property",
            "name": "objects",
            "type": "Array",
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 87,
            "description": "Spawns all the entities associated with this layer, and properly sets their attributes",
            "itemtype": "method",
            "name": "spawn",
            "return": {
                "description": "Returns itself for chainability",
                "type": "ObjectGroup"
            },
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\ObjectGroup.js",
            "line": 296,
            "description": "Despawns all the sprites associated with this layer",
            "itemtype": "method",
            "name": "despawn",
            "return": {
                "description": "Returns itself for chainability",
                "type": "ObjectGroup"
            },
            "class": "ObjectGroup"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 28,
            "description": "The map instance this tilelayer belongs to",
            "itemtype": "property",
            "name": "map",
            "type": "Tilemap",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 36,
            "description": "The game instance this tilelayer belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 44,
            "description": "The state instance this tilelayer belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 52,
            "description": "The current map of all tiles on the screen",
            "itemtype": "property",
            "name": "tiles",
            "type": "Object",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 60,
            "description": "The name of the layer",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 69,
            "description": "The size of the layer",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new Vector(1, 1)",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 78,
            "description": "The tile IDs of the tilemap",
            "itemtype": "property",
            "name": "tileIds",
            "type": "Uint32Array",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 86,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 116,
            "description": "Creates all the tile sprites needed to display the layer",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "The number of tiles in the X direction to render",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The number of tiles in the Y direction to render",
                    "type": "Number"
                }
            ],
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 269,
            "description": "Clears all the tiles currently used to render the layer",
            "itemtype": "method",
            "name": "clearTiles",
            "params": [
                {
                    "name": "remove",
                    "description": "Should this tile be completely removed (never to bee seen again)",
                    "type": "Boolean"
                }
            ],
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 282,
            "description": "Clears a tile currently used to render the layer",
            "itemtype": "method",
            "name": "clearTile",
            "params": [
                {
                    "name": "tile",
                    "description": "The tile object to clear",
                    "type": "Tile"
                },
                {
                    "name": "remove",
                    "description": "Should this tile be completely removed (never to bee seen again)",
                    "type": "Boolean"
                }
            ],
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 298,
            "description": "Moves a tile sprite from one position to another, and creates a new tile\nif the old position didn't have a sprite",
            "itemtype": "method",
            "name": "moveTileSprite",
            "params": [
                {
                    "name": "fromTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "fromTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "toTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                },
                {
                    "name": "toTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sprite to display",
                "type": "Tile"
            },
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilelayer.js",
            "line": 409,
            "description": "Pans the layer around, rendering stuff if necessary",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "The x amount to pan, if a Point is passed the dy param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "dy",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Tilelayer"
            },
            "class": "Tilelayer"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 28,
            "description": "The state instance this tilemap belongs to",
            "itemtype": "property",
            "name": "state",
            "type": "Game",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 36,
            "description": "The game instance this tilemap belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 47,
            "description": "The user-defined properties",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "default": "{}",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 58,
            "description": "The tile size",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 66,
            "description": "The size of the map",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new Vector(0, 0)",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 75,
            "description": "The orientation of the map",
            "itemtype": "property",
            "name": "orientation",
            "type": "String",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 83,
            "description": "The version of the TMX format",
            "itemtype": "property",
            "name": "version",
            "type": "Number",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 91,
            "description": "The background color of the map (since Tiled 0.9.0)",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "Number",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 101,
            "description": "The tilesets used by this map",
            "itemtype": "property",
            "name": "tilesets",
            "type": "Array",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 109,
            "description": "The scaled tile size",
            "itemtype": "property",
            "name": "scaledTileSize",
            "type": "Vector",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 120,
            "description": "The real size (size * scaledTileSize)",
            "itemtype": "property",
            "name": "realSize",
            "type": "Vector",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 167,
            "description": "Gets the tileset that an ID is associated with",
            "itemtype": "method",
            "name": "getTileset",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to find the tileset for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the tileset if found, undefined if not",
                "type": "TiledTileset"
            },
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 179,
            "description": "Destroys the tilemap instance",
            "itemtype": "method",
            "name": "destroy",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 198,
            "description": "Spawns all the objects in the ObjectGroups of this map",
            "itemtype": "method",
            "name": "spawnObjects",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 214,
            "description": "Spawns all the objects in the ObjectGroups of this map",
            "itemtype": "method",
            "name": "despawnObjects",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 230,
            "description": "Called by a Tilelayer when a tile event occurs. This is so you can listen for\nthe emitted events on the world instead of the tile itself.",
            "itemtype": "method",
            "name": "onTileEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to emit, the prefix 'tile.' will be added to it",
                    "type": "String"
                },
                {
                    "name": "tile",
                    "description": "The tile that has the event",
                    "type": "Tile"
                },
                {
                    "name": "data",
                    "description": "The raw interaction object for the event",
                    "type": "InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 246,
            "description": "Called by a ObjectGroup when an object event occurs. This is so you can listen for\nthe emitted events on the world instead of the tile itself.",
            "itemtype": "method",
            "name": "onObjectEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to emit, the prefix 'object.' will be added to it",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The object that has the event",
                    "type": "Sprite|Container"
                },
                {
                    "name": "data",
                    "description": "The raw interaction object for the event",
                    "type": "InteractionData"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 262,
            "description": "Finds a layer based on the string name",
            "itemtype": "method",
            "name": "findLayer",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the layer to find",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the layer if found, undefined if not",
                "type": "Tilelayer|ObjectGroup|Sprite"
            },
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 277,
            "description": "Pans the map around",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Tilemap"
            },
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tilemap.js",
            "line": 295,
            "description": "Called on resize to render the viewport again",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "x",
                    "description": "The x offset to consider the top-left",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y offset to consider the top-left",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width (in pixels) to render",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height (in pixels) to render",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Tilemap"
            },
            "class": "Tilemap"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 39,
            "description": "The first tileId in the tileset",
            "itemtype": "property",
            "name": "firstgid",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 47,
            "description": "The name of the tileset",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 55,
            "description": "The size of a tile in the tileset",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 63,
            "description": "The spacing around a tile in the tileset",
            "itemtype": "property",
            "name": "spacing",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 71,
            "description": "The margin around a tile in the tileset",
            "itemtype": "property",
            "name": "margin",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 79,
            "description": "The offset of tile positions when rendered",
            "itemtype": "property",
            "name": "tileoffset",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 95,
            "description": "The number of tiles calculated based on size, margin, and spacing",
            "itemtype": "property",
            "name": "numTiles",
            "type": "Vector",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 106,
            "description": "The last tileId in the tileset",
            "itemtype": "property",
            "name": "lastgid",
            "type": "Number",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 114,
            "description": "The properties of the tileset",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 122,
            "description": "The properties of the tiles in the tileset (like collision stuff)",
            "itemtype": "property",
            "name": "tileproperties",
            "type": "Object",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 130,
            "description": "The size of the tileset",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 141,
            "description": "The texture instances for each tile in the set",
            "itemtype": "property",
            "name": "textures",
            "type": "Array",
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 178,
            "description": "Gets the tile properties for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileProperties",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the properties for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The properties of the tile",
                "type": "Object"
            },
            "class": "Tileset"
        },
        {
            "file": "src\\tilemap\\Tileset.js",
            "line": 213,
            "description": "Gets the tile texture for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileTexture",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the texture for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The texture for the tile",
                "type": "Texture"
            },
            "class": "Tileset"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 21,
            "description": "Local reference to Game.",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 29,
            "description": "Canvas key-value container.",
            "itemtype": "property",
            "name": "_canvases",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 38,
            "description": "Image key-value container.",
            "itemtype": "property",
            "name": "_images",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 47,
            "description": "Sound key-value container.",
            "itemtype": "property",
            "name": "_sounds",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 56,
            "description": "Text key-value container.",
            "itemtype": "property",
            "name": "_text",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 65,
            "description": "Tilemap key-value container.",
            "itemtype": "property",
            "name": "_tilemaps",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 78,
            "description": "Add a new canvas.",
            "itemtype": "method",
            "name": "addCanvas",
            "params": [
                {
                    "name": "obj",
                    "description": "The spritesheet object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for this canvas.",
                            "type": "String"
                        },
                        {
                            "name": "canvas",
                            "description": "Canvas DOM element.",
                            "type": "HTMLCanvasElement"
                        },
                        {
                            "name": "context",
                            "description": "Render context of this canvas.",
                            "type": "CanvasRenderingContext2D"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 91,
            "description": "Add a new sprite sheet.",
            "itemtype": "method",
            "name": "addSpriteSheet",
            "params": [
                {
                    "name": "obj",
                    "description": "The spritesheet object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the sprite sheet.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this sprite sheet file.",
                            "type": "String"
                        },
                        {
                            "name": "image",
                            "description": "The image of the sprite sheet",
                            "type": "Image"
                        },
                        {
                            "name": "frameWidth",
                            "description": "Width of the sprite sheet.",
                            "type": "Number"
                        },
                        {
                            "name": "frameHeight",
                            "description": "Height of the sprite sheet.",
                            "type": "Number"
                        },
                        {
                            "name": "frameMax",
                            "description": "How many frames stored in the sprite sheet.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 115,
            "description": "Add a new tilemap.",
            "itemtype": "method",
            "name": "addTilemap",
            "params": [
                {
                    "name": "obj",
                    "description": "The tilemap file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the tilemap",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of the tilemap data file",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The loaded tilemap data",
                            "type": "Object"
                        },
                        {
                            "name": "format",
                            "description": "The format of the tilemap data",
                            "type": "Number"
                        },
                        {
                            "name": "images",
                            "description": "Array of images used in the tilesets of this tilemap",
                            "type": "Array<Image>",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 155,
            "description": "Add a new texture atlas.",
            "itemtype": "method",
            "name": "addTextureAtlas",
            "params": [
                {
                    "name": "obj",
                    "description": "The texture atlas file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the texture atlas.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this texture atlas file.",
                            "type": "String"
                        },
                        {
                            "name": "format",
                            "description": "The format of the atlas data ATLAS_FORMAT.JSON_ARRAY, ATLAS_FORMAT.JSON_HASH, or ATLAS_FORMAT.STARLING_XML",
                            "type": "Number"
                        },
                        {
                            "name": "data",
                            "description": "The texture atlas data exported from TexturePacker",
                            "type": "Object"
                        },
                        {
                            "name": "image",
                            "description": "The texture image",
                            "type": "Image"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 183,
            "description": "Add a new Bitmap Font.",
            "itemtype": "method",
            "name": "addBitmapFont",
            "params": [
                {
                    "name": "obj",
                    "description": "The bitmap font file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the font texture.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this font xml file.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Extra font data.",
                            "type": "Object"
                        },
                        {
                            "name": "format",
                            "description": "The format of the bitmap font data",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 205,
            "description": "Add a new image.",
            "itemtype": "method",
            "name": "addImage",
            "params": [
                {
                    "name": "obj",
                    "description": "The image file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the image.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this image file.",
                            "type": "String"
                        },
                        {
                            "name": "image",
                            "description": "The image object that was loaded",
                            "type": "Image"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 224,
            "description": "Add a new sound.",
            "itemtype": "method",
            "name": "addAudio",
            "params": [
                {
                    "name": "obj",
                    "description": "The audio file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the audio.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this audio file.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The loaded audio data",
                            "type": "ArrayBuffer|Audio"
                        },
                        {
                            "name": "webAudio",
                            "description": "Is this a webAudio ArrayBuffer for a sound?",
                            "type": "Boolean"
                        },
                        {
                            "name": "decoded",
                            "description": "Is the data decoded yet?",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 252,
            "description": "Add a new text data.",
            "itemtype": "method",
            "name": "addText",
            "params": [
                {
                    "name": "obj",
                    "description": "The text file object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "Asset key for the text data.",
                            "type": "String"
                        },
                        {
                            "name": "url",
                            "description": "URL of this text data file.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Extra text data.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 265,
            "description": "Adds a default image to be used when a key is wrong / missing.\nIs mapped to the key __default",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 285,
            "description": "Get canvas by key.",
            "itemtype": "method",
            "name": "getCanvas",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the canvas you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLCanvasElement"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 297,
            "description": "Get image data by key.",
            "itemtype": "method",
            "name": "getImage",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the image you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Image"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 309,
            "description": "Get a Texture by key.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the RenderTexture you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 321,
            "description": "Get a Texture by key.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the RenderTexture you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 333,
            "description": "Get a Bitmap Font by key.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the Bitmap Font you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Texture"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 345,
            "description": "Get tilemap data by key.",
            "itemtype": "method",
            "name": "getTilemap",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the tilemap you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The tilemap file data. The map data is in the `data` property, the images (for tileset) are in `images`",
                "type": "Object"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 356,
            "description": "Get sound by key.",
            "itemtype": "method",
            "name": "getAudio",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 367,
            "description": "Get sound data by key.",
            "itemtype": "method",
            "name": "getAudioData",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the sound you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "ArrayBuffer|Audio"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 379,
            "description": "Get text data by key.",
            "itemtype": "method",
            "name": "getText",
            "params": [
                {
                    "name": "key",
                    "description": "Asset key of the text data you want.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The text data you want.",
                "type": "Object"
            },
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 391,
            "description": "Remove a canvas by key.",
            "itemtype": "method",
            "name": "removeCanvas",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 401,
            "description": "Remove an image by key.",
            "itemtype": "method",
            "name": "removeImage",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 411,
            "description": "Remove a sound by key.",
            "itemtype": "method",
            "name": "removeSound",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 421,
            "description": "Remove a text by key.",
            "itemtype": "method",
            "name": "removeText",
            "params": [
                {
                    "name": "key",
                    "description": "key to remove",
                    "type": "String"
                }
            ],
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Cache.js",
            "line": 431,
            "description": "Clean up cache memory.",
            "class": "Cache"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 23,
            "description": "Gets the current time from the underlying timer",
            "itemtype": "method",
            "name": "now",
            "example": [
                "\n     clock.now();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 33,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "example": [
                "\n     clock.start();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 44,
            "description": "Stops the timer",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n     clock.stop();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 55,
            "description": "Resets the timer",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n     clock.stop();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 66,
            "description": "Gets the total time that the timer has been running",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "Total ellapsed time in ms",
                "type": "Number"
            },
            "example": [
                "\n     clock.getElapsedTime();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 79,
            "description": "Gets the difference in time since getDelta() was called last",
            "itemtype": "method",
            "name": "getDelta",
            "return": {
                "description": "Ellapsed time since last call in seconds",
                "type": "Number"
            },
            "example": [
                "\n     clock.getDelta();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 12,
            "description": "Registers a listener function to be run on an event occurance",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to listen for",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to execute when the event happens",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 39,
            "description": "Emits an event which will run all registered listeners for the event type",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to emit",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Any data you want passed along with the event",
                    "type": "Mixed"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 94,
            "description": "Removes a listener function for an event type",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to emit",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The function to remove",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\EventEmitter.js",
            "line": 137,
            "description": "Registers a one-time callback for an event",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to listen for",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "the callback to call when the event occurs",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 27,
            "description": "Adds a generic object to the world or camera",
            "itemtype": "method",
            "name": "obj",
            "params": [
                {
                    "name": "object",
                    "description": "Any game object you want to add to the parent",
                    "type": "Mixed"
                }
            ],
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 36,
            "description": "Creates a new sprite and adds it to the game world",
            "itemtype": "method",
            "name": "sprite",
            "params": [
                {
                    "name": "texture",
                    "description": "The texture for the sprite, or the key for one in the cache",
                    "type": "String|Texture"
                },
                {
                    "name": "frame",
                    "description": "A specific frame of a sprite sheet to use, either the index or string key\n     depending on the type of the sheet when loaded.",
                    "type": "String|Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "physics",
                    "description": "Should this sprite be added to the physics simulation?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 69,
            "description": "Creates a new AudioPlayer to play the sound passed in",
            "itemtype": "method",
            "name": "audio",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded audio",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "All the settings for the audio player (see AudioManager.add for all settings)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 80,
            "description": "Creates a new tilemap to add to the world",
            "itemtype": "method",
            "name": "tilemap",
            "params": [
                {
                    "name": "key",
                    "description": "The unique cache key for the preloaded tilemap data",
                    "type": "String"
                },
                {
                    "name": "constrain",
                    "description": "Should the camera be constrained to this tilemap's size?",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 120,
            "description": "Creates a new gui item and adds it to the Camera's GUI",
            "itemtype": "method",
            "name": "gui",
            "params": [
                {
                    "name": "texture",
                    "description": "The texture for the item, or the key for one in the cache",
                    "type": "String|Texture"
                },
                {
                    "name": "interactive",
                    "description": "Can the item be interacted with by mouse (clicked, dragged, etc)",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectFactory.js",
            "line": 133,
            "description": "Creates a new instance of BitmapText",
            "itemtype": "method",
            "name": "bitmaptext",
            "params": [
                {
                    "name": "text",
                    "description": "The text for the BitmapText to display",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "The key for the bitmap font loaded into the cache",
                    "type": "String"
                },
                {
                    "name": "interactive",
                    "description": "Can the item be interacted with by mouse (clicked, dragged, etc)",
                    "type": "Boolean"
                }
            ],
            "class": "ObjectFactory"
        },
        {
            "file": "src\\utils\\ObjectPool.js",
            "line": 21,
            "description": "Creates a new instance of the pool's object type, or if available\npulls one that is already created out of the pool",
            "itemtype": "method",
            "name": "create",
            "class": "ObjectPool"
        },
        {
            "file": "src\\utils\\ObjectPool.js",
            "line": 40,
            "description": "Frees an object back into the pool to be recycled",
            "itemtype": "method",
            "name": "free",
            "class": "ObjectPool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 16,
            "description": "The game instance this pool belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 28,
            "description": "Adds an Sprite Type to the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite Type to add",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The Sprite or decendant type to add to the pool",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns the passed sprite",
                "type": "Sprite"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 39,
            "description": "Checks if the Sprite Type exists in the pool",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite Type to check if is in the pool",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\SpritePool.js",
            "line": 49,
            "description": "Creates a new sprite from the pool",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite to check if is in the pool",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "The texture for the sprite",
                    "type": "Texture"
                },
                {
                    "name": "props",
                    "description": "Extra object that will be passed along (for custom sprite options)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new instance of the object from the pool",
                "type": "Sprite"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\inherit.js",
            "line": 1,
            "description": "Inherits the prototype of a parent object.",
            "itemtype": "method",
            "name": "inherit",
            "params": [
                {
                    "name": "child",
                    "description": "The Child to inherit the prototype",
                    "type": "Function"
                },
                {
                    "name": "parent",
                    "description": "The Parent to inherit from",
                    "type": "Function"
                },
                {
                    "name": "proto",
                    "description": "The prototype to apply to the child",
                    "type": "Object"
                }
            ],
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 9,
            "description": "The current user agent string",
            "itemtype": "property",
            "name": "ua",
            "type": "String",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 17,
            "description": "Whether or not canvas is supported",
            "itemtype": "property",
            "name": "canvas",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 25,
            "description": "Whether or not webgl is supported",
            "itemtype": "property",
            "name": "webgl",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 33,
            "description": "Whether or not the crypto API is supported",
            "itemtype": "property",
            "name": "crypto",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 41,
            "description": "Whether or not web workers are supported",
            "itemtype": "property",
            "name": "workers",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 49,
            "description": "Whether or not Blob URLs are supported",
            "itemtype": "property",
            "name": "blobs",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 57,
            "description": "Whether or not typed arrays are supported",
            "itemtype": "property",
            "name": "typedArrays",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 65,
            "description": "Whether or not the filesystem API is supported",
            "itemtype": "property",
            "name": "fileapi",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 73,
            "description": "Whether or not the Web Audio API is supported",
            "itemtype": "property",
            "name": "webAudio",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 81,
            "description": "Whether html Audio is supported in this browser",
            "itemtype": "property",
            "name": "htmlAudio",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 89,
            "description": "Whether or not local storage is supported",
            "itemtype": "property",
            "name": "localStorage",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 97,
            "description": "Whether or not touch is supported",
            "itemtype": "property",
            "name": "touch",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\support.js",
            "line": 105,
            "description": "Whether or not the gamepad API is supported",
            "itemtype": "property",
            "name": "gamepad",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 14,
            "description": "An empty function that performs no action",
            "itemtype": "method",
            "name": "noop",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 20,
            "description": "Gets the absolute url from a relative one",
            "itemtype": "method",
            "name": "getAbsoluteUrl",
            "params": [
                {
                    "name": "url",
                    "description": "The relative url to translate into absolute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The absolute url (fully qualified)",
                "type": "String"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 32,
            "description": "Performs an ajax request, and manages the callbacks passed in",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings of the ajax request, similar to jQuery's ajax function",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An XHR object",
                "type": "XMLHttpRequest|ActiveXObject"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 102,
            "description": "Wraps XMLHttpRequest in a cross-browser way.",
            "itemtype": "method",
            "name": "AjaxRequest",
            "return": {
                "description": "",
                "type": "XMLHttpRequest|ActiveXObject"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 132,
            "description": "This will take values and override the passed obj's properties with those values.\nThe difference from a normal object extend is that this will try to massage the passed\nvalue into the same type as the object's property. Also if the key for the value is not\nin the original object, it is not copied.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to extend the values into",
                    "type": "Object"
                },
                {
                    "name": "values",
                    "description": "The values to put into the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the updated object",
                "type": "Object"
            },
            "example": [
                "\n     var obj = { vec: new Vector(), arr: [] },\n         vals = { vec: '2|5', arr: '5|10|11' };\n     utils.setValues(obj, vals);\n     //now obj is:\n     // { vec: Vector(2, 5), arr: [5, 10, 11] }\n     "
            ],
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 212,
            "description": "From jQuery.extend, extends one object into another\ntaken straight from jQuery 2.0.3",
            "itemtype": "method",
            "name": "extend",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 281,
            "description": "From jQuery.isPlainObject, checks if an object is a plain object\ntaken straight from jQuery 2.0.3",
            "itemtype": "method",
            "name": "isPlainObject",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 312,
            "description": "Get the DOM offset values of any given element",
            "itemtype": "method",
            "name": "getOffset",
            "params": [
                {
                    "name": "element",
                    "description": "The targeted element that we want to retrieve the offset",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "The offset of the element",
                "type": "Vector"
            },
            "class": "utils"
        },
        {
            "file": "src\\core.js",
            "line": 1,
            "license": "GrapeFruit Game Engine\nCopyright (c) 2012-2014, Chad Engler\n\nGrapeFruit is licensed under the MIT License.\nhttp://www.opensource.org/licenses/mit-license.php\n\nKnown Limiting Features:\n  - Canvas\n      - IE 9+\n      - FF 2+\n      - Chrome 4+\n      - Safari 3.1+\n      - Opera 9+\n\n  - WebGL\n      - IE 11+\n      - FF 4+\n      - Chrome 8+\n      - Safari 6+\n      - Opera 12+\n\n  - Object.create\n      - IE 9+\n      - FF 4+\n      - Chrome 7+\n      - Safari 5+\n      - Opera 12+",
            "class": "plugin"
        },
        {
            "file": "src\\plugin.js",
            "line": 9,
            "description": "Patches a core function with a new one. The function you override with has a special property\ncalled `this._super` which is a reference to the function you are overriding.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the method to override",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the method to override",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to override with",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     //For example, to patch the gf.Sprite.prototype.isActiveAnimation function:\n\n     gf.plugin.patch(gf.Sprite, 'isActiveAnimation', function() {\n         //display a console message\n         console.log('checking animation!');\n         //call the original function\n         this._super();\n     });"
            ],
            "class": "plugin"
        },
        {
            "file": "src\\plugin.js",
            "line": 55,
            "description": "Registers a plugin into the gf namespace.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "plugin",
                    "description": "The object to place in the namespace",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the plugin to use as the key",
                    "type": "String"
                }
            ],
            "example": [
                "\n     //For example, to register a new plugin:\n     gf.plugin.register(MyPluginObject, 'MyPluginName');\n     var plg = new gf.MyPluginName();"
            ],
            "class": "plugin"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: defualt",
            "line": " src\\geom\\Rectangle.js:180"
        },
        {
            "message": "unknown tag: license",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\nAdd a new texture atlas loading request.",
            "line": " src\\loader\\Loader.js:330"
        },
        {
            "message": "Missing item type\nCalled when a file is successfully loaded.",
            "line": " src\\loader\\Loader.js:510"
        },
        {
            "message": "Missing item type\nProject this vector on to another vector.",
            "line": " src\\math\\Vector.js:300"
        },
        {
            "message": "Missing item type\nProject this vector onto a vector of unit length.",
            "line": " src\\math\\Vector.js:313"
        },
        {
            "message": "Missing item type\nReflect this vector on an arbitrary axis.",
            "line": " src\\math\\Vector.js:326"
        },
        {
            "message": "Missing item type\nReflect this vector on an arbitrary axis (represented by a unit vector)",
            "line": " src\\math\\Vector.js:341"
        },
        {
            "message": "Missing item type\nRotates the vector by 90 degrees",
            "line": " src\\math\\Vector.js:444"
        },
        {
            "message": "Missing item type\nAlias some native functions for great justice (or incase we want to override)",
            "line": " src\\math\\math.js:17"
        },
        {
            "message": "Missing item type\nPool of Vectors used in calculations.",
            "line": " src\\physics\\Physics.js:11"
        },
        {
            "message": "Missing item type\nPool of Arrays used in calculations.",
            "line": " src\\physics\\Physics.js:20"
        },
        {
            "message": "Missing item type\nShape testing functions",
            "line": " src\\physics\\Physics.js:328"
        },
        {
            "message": "Missing item type\nCheck if two circles intersect.",
            "line": " src\\physics\\Physics.js:331"
        },
        {
            "message": "Missing item type\nCheck if a polygon and a circle intersect.",
            "line": " src\\physics\\Physics.js:367"
        },
        {
            "message": "Missing item type\nCheck if a circle and a polygon intersect.\n\nNOTE: This runs slightly slower than polygonCircle as it just\nruns polygonCircle and reverses everything at the end.",
            "line": " src\\physics\\Physics.js:513"
        },
        {
            "message": "Missing item type\nChecks whether two convex, clockwise polygons intersect.",
            "line": " src\\physics\\Physics.js:542"
        },
        {
            "message": "Missing item type\nUtility functions",
            "line": " src\\physics\\Physics.js:582"
        },
        {
            "message": "Missing item type\nFlattens the specified array of points onto a unit vector axis,\nresulting in a one dimensional range of the minimum and\nmaximum value on that axis.",
            "line": " src\\physics\\Physics.js:585"
        },
        {
            "message": "Missing item type\nCheck whether two convex clockwise polygons are separated by the specified\naxis (must be a unit vector).",
            "line": " src\\physics\\Physics.js:616"
        },
        {
            "message": "Missing item type\nCalculates which Vornoi region a point is on a line segment.\nIt is assumed that both the line and the point are relative to (0, 0)\n\n            |       (0)      |\n     (-1)  [0]--------------[1]  (1)\n            |       (0)      |",
            "line": " src\\physics\\Physics.js:713"
        },
        {
            "message": "Missing item type\nAdds a default image to be used when a key is wrong / missing.\nIs mapped to the key __default",
            "line": " src\\utils\\Cache.js:265"
        },
        {
            "message": "Missing item type\nClean up cache memory.",
            "line": " src\\utils\\Cache.js:431"
        },
        {
            "message": "Missing item type",
            "line": " src\\core.js:1"
        }
    ]
}